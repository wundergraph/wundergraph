// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// source: wundernode_config.proto

package wgpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogLevel int32

const (
	LogLevel_DEBUG   LogLevel = 0
	LogLevel_INFO    LogLevel = 1
	LogLevel_ERROR   LogLevel = 2
	LogLevel_WARNING LogLevel = 3
	LogLevel_PANIC   LogLevel = 4
	LogLevel_FATAL   LogLevel = 5
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "DEBUG",
		1: "INFO",
		2: "ERROR",
		3: "WARNING",
		4: "PANIC",
		5: "FATAL",
	}
	LogLevel_value = map[string]int32{
		"DEBUG":   0,
		"INFO":    1,
		"ERROR":   2,
		"WARNING": 3,
		"PANIC":   4,
		"FATAL":   5,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_wundernode_config_proto_enumTypes[0].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_wundernode_config_proto_enumTypes[0]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{0}
}

type AuthProviderKind int32

const (
	AuthProviderKind_AuthProviderGithub AuthProviderKind = 0
	AuthProviderKind_AuthProviderOIDC   AuthProviderKind = 1
	AuthProviderKind_AuthProviderAuth0  AuthProviderKind = 2
)

// Enum value maps for AuthProviderKind.
var (
	AuthProviderKind_name = map[int32]string{
		0: "AuthProviderGithub",
		1: "AuthProviderOIDC",
		2: "AuthProviderAuth0",
	}
	AuthProviderKind_value = map[string]int32{
		"AuthProviderGithub": 0,
		"AuthProviderOIDC":   1,
		"AuthProviderAuth0":  2,
	}
)

func (x AuthProviderKind) Enum() *AuthProviderKind {
	p := new(AuthProviderKind)
	*p = x
	return p
}

func (x AuthProviderKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthProviderKind) Descriptor() protoreflect.EnumDescriptor {
	return file_wundernode_config_proto_enumTypes[1].Descriptor()
}

func (AuthProviderKind) Type() protoreflect.EnumType {
	return &file_wundernode_config_proto_enumTypes[1]
}

func (x AuthProviderKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthProviderKind.Descriptor instead.
func (AuthProviderKind) EnumDescriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{1}
}

type ApiCacheKind int32

const (
	ApiCacheKind_NO_CACHE        ApiCacheKind = 0
	ApiCacheKind_IN_MEMORY_CACHE ApiCacheKind = 1
	ApiCacheKind_REDIS_CACHE     ApiCacheKind = 2
)

// Enum value maps for ApiCacheKind.
var (
	ApiCacheKind_name = map[int32]string{
		0: "NO_CACHE",
		1: "IN_MEMORY_CACHE",
		2: "REDIS_CACHE",
	}
	ApiCacheKind_value = map[string]int32{
		"NO_CACHE":        0,
		"IN_MEMORY_CACHE": 1,
		"REDIS_CACHE":     2,
	}
)

func (x ApiCacheKind) Enum() *ApiCacheKind {
	p := new(ApiCacheKind)
	*p = x
	return p
}

func (x ApiCacheKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApiCacheKind) Descriptor() protoreflect.EnumDescriptor {
	return file_wundernode_config_proto_enumTypes[2].Descriptor()
}

func (ApiCacheKind) Type() protoreflect.EnumType {
	return &file_wundernode_config_proto_enumTypes[2]
}

func (x ApiCacheKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApiCacheKind.Descriptor instead.
func (ApiCacheKind) EnumDescriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{2}
}

type OperationExecutionEngine int32

const (
	OperationExecutionEngine_ENGINE_GRAPHQL OperationExecutionEngine = 0
	OperationExecutionEngine_ENGINE_NODEJS  OperationExecutionEngine = 1
)

// Enum value maps for OperationExecutionEngine.
var (
	OperationExecutionEngine_name = map[int32]string{
		0: "ENGINE_GRAPHQL",
		1: "ENGINE_NODEJS",
	}
	OperationExecutionEngine_value = map[string]int32{
		"ENGINE_GRAPHQL": 0,
		"ENGINE_NODEJS":  1,
	}
)

func (x OperationExecutionEngine) Enum() *OperationExecutionEngine {
	p := new(OperationExecutionEngine)
	*p = x
	return p
}

func (x OperationExecutionEngine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationExecutionEngine) Descriptor() protoreflect.EnumDescriptor {
	return file_wundernode_config_proto_enumTypes[3].Descriptor()
}

func (OperationExecutionEngine) Type() protoreflect.EnumType {
	return &file_wundernode_config_proto_enumTypes[3]
}

func (x OperationExecutionEngine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationExecutionEngine.Descriptor instead.
func (OperationExecutionEngine) EnumDescriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{3}
}

type PostResolveTransformationKind int32

const (
	PostResolveTransformationKind_GET_POST_RESOLVE_TRANSFORMATION PostResolveTransformationKind = 0
)

// Enum value maps for PostResolveTransformationKind.
var (
	PostResolveTransformationKind_name = map[int32]string{
		0: "GET_POST_RESOLVE_TRANSFORMATION",
	}
	PostResolveTransformationKind_value = map[string]int32{
		"GET_POST_RESOLVE_TRANSFORMATION": 0,
	}
)

func (x PostResolveTransformationKind) Enum() *PostResolveTransformationKind {
	p := new(PostResolveTransformationKind)
	*p = x
	return p
}

func (x PostResolveTransformationKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostResolveTransformationKind) Descriptor() protoreflect.EnumDescriptor {
	return file_wundernode_config_proto_enumTypes[4].Descriptor()
}

func (PostResolveTransformationKind) Type() protoreflect.EnumType {
	return &file_wundernode_config_proto_enumTypes[4]
}

func (x PostResolveTransformationKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostResolveTransformationKind.Descriptor instead.
func (PostResolveTransformationKind) EnumDescriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{4}
}

type InjectVariableKind int32

const (
	InjectVariableKind_UUID                 InjectVariableKind = 0
	InjectVariableKind_DATE_TIME            InjectVariableKind = 1
	InjectVariableKind_ENVIRONMENT_VARIABLE InjectVariableKind = 2
)

// Enum value maps for InjectVariableKind.
var (
	InjectVariableKind_name = map[int32]string{
		0: "UUID",
		1: "DATE_TIME",
		2: "ENVIRONMENT_VARIABLE",
	}
	InjectVariableKind_value = map[string]int32{
		"UUID":                 0,
		"DATE_TIME":            1,
		"ENVIRONMENT_VARIABLE": 2,
	}
)

func (x InjectVariableKind) Enum() *InjectVariableKind {
	p := new(InjectVariableKind)
	*p = x
	return p
}

func (x InjectVariableKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InjectVariableKind) Descriptor() protoreflect.EnumDescriptor {
	return file_wundernode_config_proto_enumTypes[5].Descriptor()
}

func (InjectVariableKind) Type() protoreflect.EnumType {
	return &file_wundernode_config_proto_enumTypes[5]
}

func (x InjectVariableKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InjectVariableKind.Descriptor instead.
func (InjectVariableKind) EnumDescriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{5}
}

type Claim int32

const (
	Claim_EMAIL          Claim = 0
	Claim_EMAIL_VERIFIED Claim = 1
	Claim_NAME           Claim = 2
	Claim_NICKNAME       Claim = 3
	Claim_LOCATION       Claim = 4
	Claim_PROVIDER       Claim = 5
	Claim_USERID         Claim = 6
)

// Enum value maps for Claim.
var (
	Claim_name = map[int32]string{
		0: "EMAIL",
		1: "EMAIL_VERIFIED",
		2: "NAME",
		3: "NICKNAME",
		4: "LOCATION",
		5: "PROVIDER",
		6: "USERID",
	}
	Claim_value = map[string]int32{
		"EMAIL":          0,
		"EMAIL_VERIFIED": 1,
		"NAME":           2,
		"NICKNAME":       3,
		"LOCATION":       4,
		"PROVIDER":       5,
		"USERID":         6,
	}
)

func (x Claim) Enum() *Claim {
	p := new(Claim)
	*p = x
	return p
}

func (x Claim) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Claim) Descriptor() protoreflect.EnumDescriptor {
	return file_wundernode_config_proto_enumTypes[6].Descriptor()
}

func (Claim) Type() protoreflect.EnumType {
	return &file_wundernode_config_proto_enumTypes[6]
}

func (x Claim) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Claim.Descriptor instead.
func (Claim) EnumDescriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{6}
}

type OperationType int32

const (
	OperationType_QUERY        OperationType = 0
	OperationType_MUTATION     OperationType = 1
	OperationType_SUBSCRIPTION OperationType = 2
)

// Enum value maps for OperationType.
var (
	OperationType_name = map[int32]string{
		0: "QUERY",
		1: "MUTATION",
		2: "SUBSCRIPTION",
	}
	OperationType_value = map[string]int32{
		"QUERY":        0,
		"MUTATION":     1,
		"SUBSCRIPTION": 2,
	}
)

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}

func (x OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_wundernode_config_proto_enumTypes[7].Descriptor()
}

func (OperationType) Type() protoreflect.EnumType {
	return &file_wundernode_config_proto_enumTypes[7]
}

func (x OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationType.Descriptor instead.
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{7}
}

type DataSourceKind int32

const (
	DataSourceKind_STATIC     DataSourceKind = 0
	DataSourceKind_REST       DataSourceKind = 1
	DataSourceKind_GRAPHQL    DataSourceKind = 2
	DataSourceKind_POSTGRESQL DataSourceKind = 3
	DataSourceKind_MYSQL      DataSourceKind = 4
	DataSourceKind_SQLSERVER  DataSourceKind = 5
	DataSourceKind_MONGODB    DataSourceKind = 6
	DataSourceKind_SQLITE     DataSourceKind = 7
)

// Enum value maps for DataSourceKind.
var (
	DataSourceKind_name = map[int32]string{
		0: "STATIC",
		1: "REST",
		2: "GRAPHQL",
		3: "POSTGRESQL",
		4: "MYSQL",
		5: "SQLSERVER",
		6: "MONGODB",
		7: "SQLITE",
	}
	DataSourceKind_value = map[string]int32{
		"STATIC":     0,
		"REST":       1,
		"GRAPHQL":    2,
		"POSTGRESQL": 3,
		"MYSQL":      4,
		"SQLSERVER":  5,
		"MONGODB":    6,
		"SQLITE":     7,
	}
)

func (x DataSourceKind) Enum() *DataSourceKind {
	p := new(DataSourceKind)
	*p = x
	return p
}

func (x DataSourceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSourceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_wundernode_config_proto_enumTypes[8].Descriptor()
}

func (DataSourceKind) Type() protoreflect.EnumType {
	return &file_wundernode_config_proto_enumTypes[8]
}

func (x DataSourceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSourceKind.Descriptor instead.
func (DataSourceKind) EnumDescriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{8}
}

type UpstreamAuthenticationKind int32

const (
	UpstreamAuthenticationKind_UpstreamAuthenticationJWT                        UpstreamAuthenticationKind = 0
	UpstreamAuthenticationKind_UpstreamAuthenticationJWTWithAccessTokenExchange UpstreamAuthenticationKind = 1
)

// Enum value maps for UpstreamAuthenticationKind.
var (
	UpstreamAuthenticationKind_name = map[int32]string{
		0: "UpstreamAuthenticationJWT",
		1: "UpstreamAuthenticationJWTWithAccessTokenExchange",
	}
	UpstreamAuthenticationKind_value = map[string]int32{
		"UpstreamAuthenticationJWT":                        0,
		"UpstreamAuthenticationJWTWithAccessTokenExchange": 1,
	}
)

func (x UpstreamAuthenticationKind) Enum() *UpstreamAuthenticationKind {
	p := new(UpstreamAuthenticationKind)
	*p = x
	return p
}

func (x UpstreamAuthenticationKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpstreamAuthenticationKind) Descriptor() protoreflect.EnumDescriptor {
	return file_wundernode_config_proto_enumTypes[9].Descriptor()
}

func (UpstreamAuthenticationKind) Type() protoreflect.EnumType {
	return &file_wundernode_config_proto_enumTypes[9]
}

func (x UpstreamAuthenticationKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpstreamAuthenticationKind.Descriptor instead.
func (UpstreamAuthenticationKind) EnumDescriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{9}
}

type SigningMethod int32

const (
	SigningMethod_SigningMethodHS256 SigningMethod = 0
)

// Enum value maps for SigningMethod.
var (
	SigningMethod_name = map[int32]string{
		0: "SigningMethodHS256",
	}
	SigningMethod_value = map[string]int32{
		"SigningMethodHS256": 0,
	}
)

func (x SigningMethod) Enum() *SigningMethod {
	p := new(SigningMethod)
	*p = x
	return p
}

func (x SigningMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigningMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_wundernode_config_proto_enumTypes[10].Descriptor()
}

func (SigningMethod) Type() protoreflect.EnumType {
	return &file_wundernode_config_proto_enumTypes[10]
}

func (x SigningMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SigningMethod.Descriptor instead.
func (SigningMethod) EnumDescriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{10}
}

type HTTPMethod int32

const (
	HTTPMethod_GET     HTTPMethod = 0
	HTTPMethod_POST    HTTPMethod = 1
	HTTPMethod_PUT     HTTPMethod = 2
	HTTPMethod_DELETE  HTTPMethod = 3
	HTTPMethod_OPTIONS HTTPMethod = 4
)

// Enum value maps for HTTPMethod.
var (
	HTTPMethod_name = map[int32]string{
		0: "GET",
		1: "POST",
		2: "PUT",
		3: "DELETE",
		4: "OPTIONS",
	}
	HTTPMethod_value = map[string]int32{
		"GET":     0,
		"POST":    1,
		"PUT":     2,
		"DELETE":  3,
		"OPTIONS": 4,
	}
)

func (x HTTPMethod) Enum() *HTTPMethod {
	p := new(HTTPMethod)
	*p = x
	return p
}

func (x HTTPMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTPMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_wundernode_config_proto_enumTypes[11].Descriptor()
}

func (HTTPMethod) Type() protoreflect.EnumType {
	return &file_wundernode_config_proto_enumTypes[11]
}

func (x HTTPMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTPMethod.Descriptor instead.
func (HTTPMethod) EnumDescriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{11}
}

type ArgumentSource int32

const (
	ArgumentSource_OBJECT_FIELD   ArgumentSource = 0
	ArgumentSource_FIELD_ARGUMENT ArgumentSource = 1
)

// Enum value maps for ArgumentSource.
var (
	ArgumentSource_name = map[int32]string{
		0: "OBJECT_FIELD",
		1: "FIELD_ARGUMENT",
	}
	ArgumentSource_value = map[string]int32{
		"OBJECT_FIELD":   0,
		"FIELD_ARGUMENT": 1,
	}
)

func (x ArgumentSource) Enum() *ArgumentSource {
	p := new(ArgumentSource)
	*p = x
	return p
}

func (x ArgumentSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArgumentSource) Descriptor() protoreflect.EnumDescriptor {
	return file_wundernode_config_proto_enumTypes[12].Descriptor()
}

func (ArgumentSource) Type() protoreflect.EnumType {
	return &file_wundernode_config_proto_enumTypes[12]
}

func (x ArgumentSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArgumentSource.Descriptor instead.
func (ArgumentSource) EnumDescriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{12}
}

type ArgumentRenderConfiguration int32

const (
	ArgumentRenderConfiguration_RENDER_ARGUMENT_DEFAULT          ArgumentRenderConfiguration = 0
	ArgumentRenderConfiguration_RENDER_ARGUMENT_AS_GRAPHQL_VALUE ArgumentRenderConfiguration = 1
	ArgumentRenderConfiguration_RENDER_ARGUMENT_AS_ARRAY_CSV     ArgumentRenderConfiguration = 2
)

// Enum value maps for ArgumentRenderConfiguration.
var (
	ArgumentRenderConfiguration_name = map[int32]string{
		0: "RENDER_ARGUMENT_DEFAULT",
		1: "RENDER_ARGUMENT_AS_GRAPHQL_VALUE",
		2: "RENDER_ARGUMENT_AS_ARRAY_CSV",
	}
	ArgumentRenderConfiguration_value = map[string]int32{
		"RENDER_ARGUMENT_DEFAULT":          0,
		"RENDER_ARGUMENT_AS_GRAPHQL_VALUE": 1,
		"RENDER_ARGUMENT_AS_ARRAY_CSV":     2,
	}
)

func (x ArgumentRenderConfiguration) Enum() *ArgumentRenderConfiguration {
	p := new(ArgumentRenderConfiguration)
	*p = x
	return p
}

func (x ArgumentRenderConfiguration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArgumentRenderConfiguration) Descriptor() protoreflect.EnumDescriptor {
	return file_wundernode_config_proto_enumTypes[13].Descriptor()
}

func (ArgumentRenderConfiguration) Type() protoreflect.EnumType {
	return &file_wundernode_config_proto_enumTypes[13]
}

func (x ArgumentRenderConfiguration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArgumentRenderConfiguration.Descriptor instead.
func (ArgumentRenderConfiguration) EnumDescriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{13}
}

type WebhookVerifierKind int32

const (
	WebhookVerifierKind_HMAC_SHA256 WebhookVerifierKind = 0
)

// Enum value maps for WebhookVerifierKind.
var (
	WebhookVerifierKind_name = map[int32]string{
		0: "HMAC_SHA256",
	}
	WebhookVerifierKind_value = map[string]int32{
		"HMAC_SHA256": 0,
	}
)

func (x WebhookVerifierKind) Enum() *WebhookVerifierKind {
	p := new(WebhookVerifierKind)
	*p = x
	return p
}

func (x WebhookVerifierKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebhookVerifierKind) Descriptor() protoreflect.EnumDescriptor {
	return file_wundernode_config_proto_enumTypes[14].Descriptor()
}

func (WebhookVerifierKind) Type() protoreflect.EnumType {
	return &file_wundernode_config_proto_enumTypes[14]
}

func (x WebhookVerifierKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebhookVerifierKind.Descriptor instead.
func (WebhookVerifierKind) EnumDescriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{14}
}

type ConfigurationVariableKind int32

const (
	ConfigurationVariableKind_STATIC_CONFIGURATION_VARIABLE      ConfigurationVariableKind = 0
	ConfigurationVariableKind_ENV_CONFIGURATION_VARIABLE         ConfigurationVariableKind = 1
	ConfigurationVariableKind_PLACEHOLDER_CONFIGURATION_VARIABLE ConfigurationVariableKind = 2
)

// Enum value maps for ConfigurationVariableKind.
var (
	ConfigurationVariableKind_name = map[int32]string{
		0: "STATIC_CONFIGURATION_VARIABLE",
		1: "ENV_CONFIGURATION_VARIABLE",
		2: "PLACEHOLDER_CONFIGURATION_VARIABLE",
	}
	ConfigurationVariableKind_value = map[string]int32{
		"STATIC_CONFIGURATION_VARIABLE":      0,
		"ENV_CONFIGURATION_VARIABLE":         1,
		"PLACEHOLDER_CONFIGURATION_VARIABLE": 2,
	}
)

func (x ConfigurationVariableKind) Enum() *ConfigurationVariableKind {
	p := new(ConfigurationVariableKind)
	*p = x
	return p
}

func (x ConfigurationVariableKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigurationVariableKind) Descriptor() protoreflect.EnumDescriptor {
	return file_wundernode_config_proto_enumTypes[15].Descriptor()
}

func (ConfigurationVariableKind) Type() protoreflect.EnumType {
	return &file_wundernode_config_proto_enumTypes[15]
}

func (x ConfigurationVariableKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigurationVariableKind.Descriptor instead.
func (ConfigurationVariableKind) EnumDescriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{15}
}

type ApiAuthenticationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CookieBased *CookieBasedAuthentication `protobuf:"bytes,1,opt,name=cookieBased,proto3" json:"cookieBased,omitempty"`
	Hooks       *ApiAuthenticationHooks    `protobuf:"bytes,2,opt,name=hooks,proto3" json:"hooks,omitempty"`
	JwksBased   *JwksBasedAuthentication   `protobuf:"bytes,3,opt,name=jwksBased,proto3" json:"jwksBased,omitempty"`
}

func (x *ApiAuthenticationConfig) Reset() {
	*x = ApiAuthenticationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiAuthenticationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiAuthenticationConfig) ProtoMessage() {}

func (x *ApiAuthenticationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiAuthenticationConfig.ProtoReflect.Descriptor instead.
func (*ApiAuthenticationConfig) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{0}
}

func (x *ApiAuthenticationConfig) GetCookieBased() *CookieBasedAuthentication {
	if x != nil {
		return x.CookieBased
	}
	return nil
}

func (x *ApiAuthenticationConfig) GetHooks() *ApiAuthenticationHooks {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *ApiAuthenticationConfig) GetJwksBased() *JwksBasedAuthentication {
	if x != nil {
		return x.JwksBased
	}
	return nil
}

type JwksBasedAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Providers []*JwksAuthProvider `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
}

func (x *JwksBasedAuthentication) Reset() {
	*x = JwksBasedAuthentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwksBasedAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwksBasedAuthentication) ProtoMessage() {}

func (x *JwksBasedAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwksBasedAuthentication.ProtoReflect.Descriptor instead.
func (*JwksBasedAuthentication) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{1}
}

func (x *JwksBasedAuthentication) GetProviders() []*JwksAuthProvider {
	if x != nil {
		return x.Providers
	}
	return nil
}

type JwksAuthProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JwksUrl                 *ConfigurationVariable `protobuf:"bytes,1,opt,name=jwksUrl,proto3" json:"jwksUrl,omitempty"`
	JwksJson                *ConfigurationVariable `protobuf:"bytes,2,opt,name=jwksJson,proto3" json:"jwksJson,omitempty"`
	UserInfoEndpoint        *ConfigurationVariable `protobuf:"bytes,3,opt,name=userInfoEndpoint,proto3" json:"userInfoEndpoint,omitempty"`
	UserInfoCacheTtlSeconds int64                  `protobuf:"varint,4,opt,name=userInfoCacheTtlSeconds,proto3" json:"userInfoCacheTtlSeconds,omitempty"`
}

func (x *JwksAuthProvider) Reset() {
	*x = JwksAuthProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwksAuthProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwksAuthProvider) ProtoMessage() {}

func (x *JwksAuthProvider) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwksAuthProvider.ProtoReflect.Descriptor instead.
func (*JwksAuthProvider) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{2}
}

func (x *JwksAuthProvider) GetJwksUrl() *ConfigurationVariable {
	if x != nil {
		return x.JwksUrl
	}
	return nil
}

func (x *JwksAuthProvider) GetJwksJson() *ConfigurationVariable {
	if x != nil {
		return x.JwksJson
	}
	return nil
}

func (x *JwksAuthProvider) GetUserInfoEndpoint() *ConfigurationVariable {
	if x != nil {
		return x.UserInfoEndpoint
	}
	return nil
}

func (x *JwksAuthProvider) GetUserInfoCacheTtlSeconds() int64 {
	if x != nil {
		return x.UserInfoCacheTtlSeconds
	}
	return 0
}

type ApiAuthenticationHooks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostAuthentication         bool `protobuf:"varint,1,opt,name=postAuthentication,proto3" json:"postAuthentication,omitempty"`
	MutatingPostAuthentication bool `protobuf:"varint,2,opt,name=mutatingPostAuthentication,proto3" json:"mutatingPostAuthentication,omitempty"`
	RevalidateAuthentication   bool `protobuf:"varint,3,opt,name=revalidateAuthentication,proto3" json:"revalidateAuthentication,omitempty"`
	PostLogout                 bool `protobuf:"varint,4,opt,name=postLogout,proto3" json:"postLogout,omitempty"`
}

func (x *ApiAuthenticationHooks) Reset() {
	*x = ApiAuthenticationHooks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiAuthenticationHooks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiAuthenticationHooks) ProtoMessage() {}

func (x *ApiAuthenticationHooks) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiAuthenticationHooks.ProtoReflect.Descriptor instead.
func (*ApiAuthenticationHooks) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{3}
}

func (x *ApiAuthenticationHooks) GetPostAuthentication() bool {
	if x != nil {
		return x.PostAuthentication
	}
	return false
}

func (x *ApiAuthenticationHooks) GetMutatingPostAuthentication() bool {
	if x != nil {
		return x.MutatingPostAuthentication
	}
	return false
}

func (x *ApiAuthenticationHooks) GetRevalidateAuthentication() bool {
	if x != nil {
		return x.RevalidateAuthentication
	}
	return false
}

func (x *ApiAuthenticationHooks) GetPostLogout() bool {
	if x != nil {
		return x.PostLogout
	}
	return false
}

type CookieBasedAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Providers                    []*AuthProvider          `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	AuthorizedRedirectUris       []*ConfigurationVariable `protobuf:"bytes,2,rep,name=authorizedRedirectUris,proto3" json:"authorizedRedirectUris,omitempty"`
	AuthorizedRedirectUriRegexes []*ConfigurationVariable `protobuf:"bytes,3,rep,name=authorizedRedirectUriRegexes,proto3" json:"authorizedRedirectUriRegexes,omitempty"`
	HashKey                      *ConfigurationVariable   `protobuf:"bytes,4,opt,name=hashKey,proto3" json:"hashKey,omitempty"`
	BlockKey                     *ConfigurationVariable   `protobuf:"bytes,5,opt,name=blockKey,proto3" json:"blockKey,omitempty"`
	CsrfSecret                   *ConfigurationVariable   `protobuf:"bytes,6,opt,name=csrfSecret,proto3" json:"csrfSecret,omitempty"`
}

func (x *CookieBasedAuthentication) Reset() {
	*x = CookieBasedAuthentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookieBasedAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookieBasedAuthentication) ProtoMessage() {}

func (x *CookieBasedAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookieBasedAuthentication.ProtoReflect.Descriptor instead.
func (*CookieBasedAuthentication) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{4}
}

func (x *CookieBasedAuthentication) GetProviders() []*AuthProvider {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *CookieBasedAuthentication) GetAuthorizedRedirectUris() []*ConfigurationVariable {
	if x != nil {
		return x.AuthorizedRedirectUris
	}
	return nil
}

func (x *CookieBasedAuthentication) GetAuthorizedRedirectUriRegexes() []*ConfigurationVariable {
	if x != nil {
		return x.AuthorizedRedirectUriRegexes
	}
	return nil
}

func (x *CookieBasedAuthentication) GetHashKey() *ConfigurationVariable {
	if x != nil {
		return x.HashKey
	}
	return nil
}

func (x *CookieBasedAuthentication) GetBlockKey() *ConfigurationVariable {
	if x != nil {
		return x.BlockKey
	}
	return nil
}

func (x *CookieBasedAuthentication) GetCsrfSecret() *ConfigurationVariable {
	if x != nil {
		return x.CsrfSecret
	}
	return nil
}

type AuthProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Kind         AuthProviderKind                 `protobuf:"varint,2,opt,name=kind,proto3,enum=wgpb.AuthProviderKind" json:"kind,omitempty"`
	GithubConfig *GithubAuthProviderConfig        `protobuf:"bytes,3,opt,name=githubConfig,proto3" json:"githubConfig,omitempty"`
	OidcConfig   *OpenIDConnectAuthProviderConfig `protobuf:"bytes,4,opt,name=oidcConfig,proto3" json:"oidcConfig,omitempty"`
}

func (x *AuthProvider) Reset() {
	*x = AuthProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthProvider) ProtoMessage() {}

func (x *AuthProvider) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthProvider.ProtoReflect.Descriptor instead.
func (*AuthProvider) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{5}
}

func (x *AuthProvider) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuthProvider) GetKind() AuthProviderKind {
	if x != nil {
		return x.Kind
	}
	return AuthProviderKind_AuthProviderGithub
}

func (x *AuthProvider) GetGithubConfig() *GithubAuthProviderConfig {
	if x != nil {
		return x.GithubConfig
	}
	return nil
}

func (x *AuthProvider) GetOidcConfig() *OpenIDConnectAuthProviderConfig {
	if x != nil {
		return x.OidcConfig
	}
	return nil
}

type GithubAuthProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     *ConfigurationVariable `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ClientSecret *ConfigurationVariable `protobuf:"bytes,2,opt,name=clientSecret,proto3" json:"clientSecret,omitempty"`
}

func (x *GithubAuthProviderConfig) Reset() {
	*x = GithubAuthProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubAuthProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubAuthProviderConfig) ProtoMessage() {}

func (x *GithubAuthProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubAuthProviderConfig.ProtoReflect.Descriptor instead.
func (*GithubAuthProviderConfig) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{6}
}

func (x *GithubAuthProviderConfig) GetClientId() *ConfigurationVariable {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *GithubAuthProviderConfig) GetClientSecret() *ConfigurationVariable {
	if x != nil {
		return x.ClientSecret
	}
	return nil
}

type OpenIDConnectQueryParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *ConfigurationVariable `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *ConfigurationVariable `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OpenIDConnectQueryParameter) Reset() {
	*x = OpenIDConnectQueryParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenIDConnectQueryParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIDConnectQueryParameter) ProtoMessage() {}

func (x *OpenIDConnectQueryParameter) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIDConnectQueryParameter.ProtoReflect.Descriptor instead.
func (*OpenIDConnectQueryParameter) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{7}
}

func (x *OpenIDConnectQueryParameter) GetName() *ConfigurationVariable {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *OpenIDConnectQueryParameter) GetValue() *ConfigurationVariable {
	if x != nil {
		return x.Value
	}
	return nil
}

type OpenIDConnectAuthProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer          *ConfigurationVariable         `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	ClientId        *ConfigurationVariable         `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ClientSecret    *ConfigurationVariable         `protobuf:"bytes,3,opt,name=clientSecret,proto3" json:"clientSecret,omitempty"`
	QueryParameters []*OpenIDConnectQueryParameter `protobuf:"bytes,4,rep,name=queryParameters,proto3" json:"queryParameters,omitempty"`
}

func (x *OpenIDConnectAuthProviderConfig) Reset() {
	*x = OpenIDConnectAuthProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenIDConnectAuthProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIDConnectAuthProviderConfig) ProtoMessage() {}

func (x *OpenIDConnectAuthProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIDConnectAuthProviderConfig.ProtoReflect.Descriptor instead.
func (*OpenIDConnectAuthProviderConfig) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{8}
}

func (x *OpenIDConnectAuthProviderConfig) GetIssuer() *ConfigurationVariable {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *OpenIDConnectAuthProviderConfig) GetClientId() *ConfigurationVariable {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *OpenIDConnectAuthProviderConfig) GetClientSecret() *ConfigurationVariable {
	if x != nil {
		return x.ClientSecret
	}
	return nil
}

func (x *OpenIDConnectAuthProviderConfig) GetQueryParameters() []*OpenIDConnectQueryParameter {
	if x != nil {
		return x.QueryParameters
	}
	return nil
}

type ApiCacheConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind           ApiCacheKind         `protobuf:"varint,1,opt,name=kind,proto3,enum=wgpb.ApiCacheKind" json:"kind,omitempty"`
	InMemoryConfig *InMemoryCacheConfig `protobuf:"bytes,2,opt,name=inMemoryConfig,proto3" json:"inMemoryConfig,omitempty"`
	RedisConfig    *RedisCacheConfig    `protobuf:"bytes,3,opt,name=redisConfig,proto3" json:"redisConfig,omitempty"`
}

func (x *ApiCacheConfig) Reset() {
	*x = ApiCacheConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiCacheConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiCacheConfig) ProtoMessage() {}

func (x *ApiCacheConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiCacheConfig.ProtoReflect.Descriptor instead.
func (*ApiCacheConfig) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{9}
}

func (x *ApiCacheConfig) GetKind() ApiCacheKind {
	if x != nil {
		return x.Kind
	}
	return ApiCacheKind_NO_CACHE
}

func (x *ApiCacheConfig) GetInMemoryConfig() *InMemoryCacheConfig {
	if x != nil {
		return x.InMemoryConfig
	}
	return nil
}

func (x *ApiCacheConfig) GetRedisConfig() *RedisCacheConfig {
	if x != nil {
		return x.RedisConfig
	}
	return nil
}

type InMemoryCacheConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSize int64 `protobuf:"varint,1,opt,name=maxSize,proto3" json:"maxSize,omitempty"`
}

func (x *InMemoryCacheConfig) Reset() {
	*x = InMemoryCacheConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InMemoryCacheConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InMemoryCacheConfig) ProtoMessage() {}

func (x *InMemoryCacheConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InMemoryCacheConfig.ProtoReflect.Descriptor instead.
func (*InMemoryCacheConfig) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{10}
}

func (x *InMemoryCacheConfig) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

type RedisCacheConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedisUrlEnvVar string `protobuf:"bytes,1,opt,name=redisUrlEnvVar,proto3" json:"redisUrlEnvVar,omitempty"`
}

func (x *RedisCacheConfig) Reset() {
	*x = RedisCacheConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisCacheConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisCacheConfig) ProtoMessage() {}

func (x *RedisCacheConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisCacheConfig.ProtoReflect.Descriptor instead.
func (*RedisCacheConfig) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{11}
}

func (x *RedisCacheConfig) GetRedisUrlEnvVar() string {
	if x != nil {
		return x.RedisUrlEnvVar
	}
	return ""
}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   string                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Content                string                           `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	OperationType          OperationType                    `protobuf:"varint,3,opt,name=operationType,proto3,enum=wgpb.OperationType" json:"operationType,omitempty"`
	VariablesSchema        string                           `protobuf:"bytes,4,opt,name=variablesSchema,proto3" json:"variablesSchema,omitempty"`
	ResponseSchema         string                           `protobuf:"bytes,5,opt,name=responseSchema,proto3" json:"responseSchema,omitempty"`
	CacheConfig            *OperationCacheConfig            `protobuf:"bytes,7,opt,name=cacheConfig,proto3" json:"cacheConfig,omitempty"`
	AuthenticationConfig   *OperationAuthenticationConfig   `protobuf:"bytes,8,opt,name=authenticationConfig,proto3" json:"authenticationConfig,omitempty"`
	LiveQueryConfig        *OperationLiveQueryConfig        `protobuf:"bytes,9,opt,name=liveQueryConfig,proto3" json:"liveQueryConfig,omitempty"`
	AuthorizationConfig    *OperationAuthorizationConfig    `protobuf:"bytes,10,opt,name=authorizationConfig,proto3" json:"authorizationConfig,omitempty"`
	HooksConfiguration     *OperationHooksConfiguration     `protobuf:"bytes,11,opt,name=hooksConfiguration,proto3" json:"hooksConfiguration,omitempty"`
	VariablesConfiguration *OperationVariablesConfiguration `protobuf:"bytes,12,opt,name=variablesConfiguration,proto3" json:"variablesConfiguration,omitempty"`
	// internal operations are only accessible internally, e.g. to hooks
	// they cannot be reached from the public surface of the API
	Internal                     bool                         `protobuf:"varint,13,opt,name=internal,proto3" json:"internal,omitempty"`
	InterpolationVariablesSchema string                       `protobuf:"bytes,14,opt,name=interpolationVariablesSchema,proto3" json:"interpolationVariablesSchema,omitempty"`
	PostResolveTransformations   []*PostResolveTransformation `protobuf:"bytes,15,rep,name=postResolveTransformations,proto3" json:"postResolveTransformations,omitempty"`
	Engine                       OperationExecutionEngine     `protobuf:"varint,16,opt,name=engine,proto3,enum=wgpb.OperationExecutionEngine" json:"engine,omitempty"`
	Path                         string                       `protobuf:"bytes,17,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{12}
}

func (x *Operation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Operation) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Operation) GetOperationType() OperationType {
	if x != nil {
		return x.OperationType
	}
	return OperationType_QUERY
}

func (x *Operation) GetVariablesSchema() string {
	if x != nil {
		return x.VariablesSchema
	}
	return ""
}

func (x *Operation) GetResponseSchema() string {
	if x != nil {
		return x.ResponseSchema
	}
	return ""
}

func (x *Operation) GetCacheConfig() *OperationCacheConfig {
	if x != nil {
		return x.CacheConfig
	}
	return nil
}

func (x *Operation) GetAuthenticationConfig() *OperationAuthenticationConfig {
	if x != nil {
		return x.AuthenticationConfig
	}
	return nil
}

func (x *Operation) GetLiveQueryConfig() *OperationLiveQueryConfig {
	if x != nil {
		return x.LiveQueryConfig
	}
	return nil
}

func (x *Operation) GetAuthorizationConfig() *OperationAuthorizationConfig {
	if x != nil {
		return x.AuthorizationConfig
	}
	return nil
}

func (x *Operation) GetHooksConfiguration() *OperationHooksConfiguration {
	if x != nil {
		return x.HooksConfiguration
	}
	return nil
}

func (x *Operation) GetVariablesConfiguration() *OperationVariablesConfiguration {
	if x != nil {
		return x.VariablesConfiguration
	}
	return nil
}

func (x *Operation) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

func (x *Operation) GetInterpolationVariablesSchema() string {
	if x != nil {
		return x.InterpolationVariablesSchema
	}
	return ""
}

func (x *Operation) GetPostResolveTransformations() []*PostResolveTransformation {
	if x != nil {
		return x.PostResolveTransformations
	}
	return nil
}

func (x *Operation) GetEngine() OperationExecutionEngine {
	if x != nil {
		return x.Engine
	}
	return OperationExecutionEngine_ENGINE_GRAPHQL
}

func (x *Operation) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type PostResolveTransformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind  PostResolveTransformationKind `protobuf:"varint,1,opt,name=kind,proto3,enum=wgpb.PostResolveTransformationKind" json:"kind,omitempty"`
	Depth int64                         `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
	Get   *PostResolveGetTransformation `protobuf:"bytes,3,opt,name=get,proto3" json:"get,omitempty"`
}

func (x *PostResolveTransformation) Reset() {
	*x = PostResolveTransformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostResolveTransformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostResolveTransformation) ProtoMessage() {}

func (x *PostResolveTransformation) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostResolveTransformation.ProtoReflect.Descriptor instead.
func (*PostResolveTransformation) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{13}
}

func (x *PostResolveTransformation) GetKind() PostResolveTransformationKind {
	if x != nil {
		return x.Kind
	}
	return PostResolveTransformationKind_GET_POST_RESOLVE_TRANSFORMATION
}

func (x *PostResolveTransformation) GetDepth() int64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *PostResolveTransformation) GetGet() *PostResolveGetTransformation {
	if x != nil {
		return x.Get
	}
	return nil
}

type PostResolveGetTransformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From []string `protobuf:"bytes,1,rep,name=from,proto3" json:"from,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty"`
}

func (x *PostResolveGetTransformation) Reset() {
	*x = PostResolveGetTransformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostResolveGetTransformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostResolveGetTransformation) ProtoMessage() {}

func (x *PostResolveGetTransformation) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostResolveGetTransformation.ProtoReflect.Descriptor instead.
func (*PostResolveGetTransformation) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{14}
}

func (x *PostResolveGetTransformation) GetFrom() []string {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *PostResolveGetTransformation) GetTo() []string {
	if x != nil {
		return x.To
	}
	return nil
}

type OperationVariablesConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InjectVariables []*VariableInjectionConfiguration `protobuf:"bytes,1,rep,name=injectVariables,proto3" json:"injectVariables,omitempty"`
}

func (x *OperationVariablesConfiguration) Reset() {
	*x = OperationVariablesConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationVariablesConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationVariablesConfiguration) ProtoMessage() {}

func (x *OperationVariablesConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationVariablesConfiguration.ProtoReflect.Descriptor instead.
func (*OperationVariablesConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{15}
}

func (x *OperationVariablesConfiguration) GetInjectVariables() []*VariableInjectionConfiguration {
	if x != nil {
		return x.InjectVariables
	}
	return nil
}

type VariableInjectionConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VariableName            string             `protobuf:"bytes,1,opt,name=variableName,proto3" json:"variableName,omitempty"`
	VariableKind            InjectVariableKind `protobuf:"varint,2,opt,name=variableKind,proto3,enum=wgpb.InjectVariableKind" json:"variableKind,omitempty"`
	DateFormat              string             `protobuf:"bytes,3,opt,name=dateFormat,proto3" json:"dateFormat,omitempty"`
	EnvironmentVariableName string             `protobuf:"bytes,4,opt,name=environmentVariableName,proto3" json:"environmentVariableName,omitempty"`
}

func (x *VariableInjectionConfiguration) Reset() {
	*x = VariableInjectionConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableInjectionConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableInjectionConfiguration) ProtoMessage() {}

func (x *VariableInjectionConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableInjectionConfiguration.ProtoReflect.Descriptor instead.
func (*VariableInjectionConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{16}
}

func (x *VariableInjectionConfiguration) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *VariableInjectionConfiguration) GetVariableKind() InjectVariableKind {
	if x != nil {
		return x.VariableKind
	}
	return InjectVariableKind_UUID
}

func (x *VariableInjectionConfiguration) GetDateFormat() string {
	if x != nil {
		return x.DateFormat
	}
	return ""
}

func (x *VariableInjectionConfiguration) GetEnvironmentVariableName() string {
	if x != nil {
		return x.EnvironmentVariableName
	}
	return ""
}

type GraphQLDataSourceHooksConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnWSTransportConnectionInit bool `protobuf:"varint,1,opt,name=onWSTransportConnectionInit,proto3" json:"onWSTransportConnectionInit,omitempty"`
}

func (x *GraphQLDataSourceHooksConfiguration) Reset() {
	*x = GraphQLDataSourceHooksConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLDataSourceHooksConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLDataSourceHooksConfiguration) ProtoMessage() {}

func (x *GraphQLDataSourceHooksConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLDataSourceHooksConfiguration.ProtoReflect.Descriptor instead.
func (*GraphQLDataSourceHooksConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{17}
}

func (x *GraphQLDataSourceHooksConfiguration) GetOnWSTransportConnectionInit() bool {
	if x != nil {
		return x.OnWSTransportConnectionInit
	}
	return false
}

type OperationHooksConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreResolve              bool                          `protobuf:"varint,1,opt,name=preResolve,proto3" json:"preResolve,omitempty"`
	PostResolve             bool                          `protobuf:"varint,2,opt,name=postResolve,proto3" json:"postResolve,omitempty"`
	MutatingPreResolve      bool                          `protobuf:"varint,3,opt,name=mutatingPreResolve,proto3" json:"mutatingPreResolve,omitempty"`
	MutatingPostResolve     bool                          `protobuf:"varint,4,opt,name=mutatingPostResolve,proto3" json:"mutatingPostResolve,omitempty"`
	MockResolve             *MockResolveHookConfiguration `protobuf:"bytes,5,opt,name=mockResolve,proto3" json:"mockResolve,omitempty"`
	HttpTransportOnRequest  bool                          `protobuf:"varint,6,opt,name=httpTransportOnRequest,proto3" json:"httpTransportOnRequest,omitempty"`
	HttpTransportOnResponse bool                          `protobuf:"varint,7,opt,name=httpTransportOnResponse,proto3" json:"httpTransportOnResponse,omitempty"`
	CustomResolve           bool                          `protobuf:"varint,8,opt,name=customResolve,proto3" json:"customResolve,omitempty"`
}

func (x *OperationHooksConfiguration) Reset() {
	*x = OperationHooksConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationHooksConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationHooksConfiguration) ProtoMessage() {}

func (x *OperationHooksConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationHooksConfiguration.ProtoReflect.Descriptor instead.
func (*OperationHooksConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{18}
}

func (x *OperationHooksConfiguration) GetPreResolve() bool {
	if x != nil {
		return x.PreResolve
	}
	return false
}

func (x *OperationHooksConfiguration) GetPostResolve() bool {
	if x != nil {
		return x.PostResolve
	}
	return false
}

func (x *OperationHooksConfiguration) GetMutatingPreResolve() bool {
	if x != nil {
		return x.MutatingPreResolve
	}
	return false
}

func (x *OperationHooksConfiguration) GetMutatingPostResolve() bool {
	if x != nil {
		return x.MutatingPostResolve
	}
	return false
}

func (x *OperationHooksConfiguration) GetMockResolve() *MockResolveHookConfiguration {
	if x != nil {
		return x.MockResolve
	}
	return nil
}

func (x *OperationHooksConfiguration) GetHttpTransportOnRequest() bool {
	if x != nil {
		return x.HttpTransportOnRequest
	}
	return false
}

func (x *OperationHooksConfiguration) GetHttpTransportOnResponse() bool {
	if x != nil {
		return x.HttpTransportOnResponse
	}
	return false
}

func (x *OperationHooksConfiguration) GetCustomResolve() bool {
	if x != nil {
		return x.CustomResolve
	}
	return false
}

type MockResolveHookConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable                            bool  `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	SubscriptionPollingIntervalMillis int64 `protobuf:"varint,2,opt,name=subscriptionPollingIntervalMillis,proto3" json:"subscriptionPollingIntervalMillis,omitempty"`
}

func (x *MockResolveHookConfiguration) Reset() {
	*x = MockResolveHookConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockResolveHookConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockResolveHookConfiguration) ProtoMessage() {}

func (x *MockResolveHookConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockResolveHookConfiguration.ProtoReflect.Descriptor instead.
func (*MockResolveHookConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{19}
}

func (x *MockResolveHookConfiguration) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *MockResolveHookConfiguration) GetSubscriptionPollingIntervalMillis() int64 {
	if x != nil {
		return x.SubscriptionPollingIntervalMillis
	}
	return 0
}

type OperationAuthorizationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claims     []*ClaimConfig       `protobuf:"bytes,1,rep,name=claims,proto3" json:"claims,omitempty"`
	RoleConfig *OperationRoleConfig `protobuf:"bytes,2,opt,name=roleConfig,proto3" json:"roleConfig,omitempty"`
}

func (x *OperationAuthorizationConfig) Reset() {
	*x = OperationAuthorizationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationAuthorizationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationAuthorizationConfig) ProtoMessage() {}

func (x *OperationAuthorizationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationAuthorizationConfig.ProtoReflect.Descriptor instead.
func (*OperationAuthorizationConfig) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{20}
}

func (x *OperationAuthorizationConfig) GetClaims() []*ClaimConfig {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *OperationAuthorizationConfig) GetRoleConfig() *OperationRoleConfig {
	if x != nil {
		return x.RoleConfig
	}
	return nil
}

type OperationRoleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the user must match all roles
	RequireMatchAll []string `protobuf:"bytes,1,rep,name=requireMatchAll,proto3" json:"requireMatchAll,omitempty"`
	// the user must match at least one of the roles
	RequireMatchAny []string `protobuf:"bytes,2,rep,name=requireMatchAny,proto3" json:"requireMatchAny,omitempty"`
	// the user must not match all of the roles
	DenyMatchAll []string `protobuf:"bytes,3,rep,name=denyMatchAll,proto3" json:"denyMatchAll,omitempty"`
	// the user must not match any of the roles
	DenyMatchAny []string `protobuf:"bytes,4,rep,name=denyMatchAny,proto3" json:"denyMatchAny,omitempty"`
}

func (x *OperationRoleConfig) Reset() {
	*x = OperationRoleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationRoleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationRoleConfig) ProtoMessage() {}

func (x *OperationRoleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationRoleConfig.ProtoReflect.Descriptor instead.
func (*OperationRoleConfig) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{21}
}

func (x *OperationRoleConfig) GetRequireMatchAll() []string {
	if x != nil {
		return x.RequireMatchAll
	}
	return nil
}

func (x *OperationRoleConfig) GetRequireMatchAny() []string {
	if x != nil {
		return x.RequireMatchAny
	}
	return nil
}

func (x *OperationRoleConfig) GetDenyMatchAll() []string {
	if x != nil {
		return x.DenyMatchAll
	}
	return nil
}

func (x *OperationRoleConfig) GetDenyMatchAny() []string {
	if x != nil {
		return x.DenyMatchAny
	}
	return nil
}

type ClaimConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VariableName string `protobuf:"bytes,1,opt,name=variableName,proto3" json:"variableName,omitempty"`
	Claim        Claim  `protobuf:"varint,2,opt,name=claim,proto3,enum=wgpb.Claim" json:"claim,omitempty"`
}

func (x *ClaimConfig) Reset() {
	*x = ClaimConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimConfig) ProtoMessage() {}

func (x *ClaimConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimConfig.ProtoReflect.Descriptor instead.
func (*ClaimConfig) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{22}
}

func (x *ClaimConfig) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *ClaimConfig) GetClaim() Claim {
	if x != nil {
		return x.Claim
	}
	return Claim_EMAIL
}

type OperationLiveQueryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable                 bool  `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	PollingIntervalSeconds int64 `protobuf:"varint,2,opt,name=pollingIntervalSeconds,proto3" json:"pollingIntervalSeconds,omitempty"`
}

func (x *OperationLiveQueryConfig) Reset() {
	*x = OperationLiveQueryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationLiveQueryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationLiveQueryConfig) ProtoMessage() {}

func (x *OperationLiveQueryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationLiveQueryConfig.ProtoReflect.Descriptor instead.
func (*OperationLiveQueryConfig) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{23}
}

func (x *OperationLiveQueryConfig) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *OperationLiveQueryConfig) GetPollingIntervalSeconds() int64 {
	if x != nil {
		return x.PollingIntervalSeconds
	}
	return 0
}

type OperationAuthenticationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthRequired bool `protobuf:"varint,1,opt,name=authRequired,proto3" json:"authRequired,omitempty"`
}

func (x *OperationAuthenticationConfig) Reset() {
	*x = OperationAuthenticationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationAuthenticationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationAuthenticationConfig) ProtoMessage() {}

func (x *OperationAuthenticationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationAuthenticationConfig.ProtoReflect.Descriptor instead.
func (*OperationAuthenticationConfig) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{24}
}

func (x *OperationAuthenticationConfig) GetAuthRequired() bool {
	if x != nil {
		return x.AuthRequired
	}
	return false
}

type OperationCacheConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable               bool  `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	MaxAge               int64 `protobuf:"varint,2,opt,name=maxAge,proto3" json:"maxAge,omitempty"`
	Public               bool  `protobuf:"varint,3,opt,name=public,proto3" json:"public,omitempty"`
	StaleWhileRevalidate int64 `protobuf:"varint,4,opt,name=staleWhileRevalidate,proto3" json:"staleWhileRevalidate,omitempty"`
}

func (x *OperationCacheConfig) Reset() {
	*x = OperationCacheConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationCacheConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationCacheConfig) ProtoMessage() {}

func (x *OperationCacheConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationCacheConfig.ProtoReflect.Descriptor instead.
func (*OperationCacheConfig) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{25}
}

func (x *OperationCacheConfig) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *OperationCacheConfig) GetMaxAge() int64 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *OperationCacheConfig) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *OperationCacheConfig) GetStaleWhileRevalidate() int64 {
	if x != nil {
		return x.StaleWhileRevalidate
	}
	return 0
}

type EngineConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultFlushInterval     int64                      `protobuf:"varint,1,opt,name=defaultFlushInterval,proto3" json:"defaultFlushInterval,omitempty"`
	DatasourceConfigurations []*DataSourceConfiguration `protobuf:"bytes,2,rep,name=datasourceConfigurations,proto3" json:"datasourceConfigurations,omitempty"`
	FieldConfigurations      []*FieldConfiguration      `protobuf:"bytes,3,rep,name=fieldConfigurations,proto3" json:"fieldConfigurations,omitempty"`
	GraphqlSchema            string                     `protobuf:"bytes,4,opt,name=graphqlSchema,proto3" json:"graphqlSchema,omitempty"`
	TypeConfigurations       []*TypeConfiguration       `protobuf:"bytes,5,rep,name=typeConfigurations,proto3" json:"typeConfigurations,omitempty"`
}

func (x *EngineConfiguration) Reset() {
	*x = EngineConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineConfiguration) ProtoMessage() {}

func (x *EngineConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineConfiguration.ProtoReflect.Descriptor instead.
func (*EngineConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{26}
}

func (x *EngineConfiguration) GetDefaultFlushInterval() int64 {
	if x != nil {
		return x.DefaultFlushInterval
	}
	return 0
}

func (x *EngineConfiguration) GetDatasourceConfigurations() []*DataSourceConfiguration {
	if x != nil {
		return x.DatasourceConfigurations
	}
	return nil
}

func (x *EngineConfiguration) GetFieldConfigurations() []*FieldConfiguration {
	if x != nil {
		return x.FieldConfigurations
	}
	return nil
}

func (x *EngineConfiguration) GetGraphqlSchema() string {
	if x != nil {
		return x.GraphqlSchema
	}
	return ""
}

func (x *EngineConfiguration) GetTypeConfigurations() []*TypeConfiguration {
	if x != nil {
		return x.TypeConfigurations
	}
	return nil
}

type DataSourceConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind                       DataSourceKind             `protobuf:"varint,1,opt,name=kind,proto3,enum=wgpb.DataSourceKind" json:"kind,omitempty"`
	RootNodes                  []*TypeField               `protobuf:"bytes,2,rep,name=rootNodes,proto3" json:"rootNodes,omitempty"`
	ChildNodes                 []*TypeField               `protobuf:"bytes,3,rep,name=childNodes,proto3" json:"childNodes,omitempty"`
	OverrideFieldPathFromAlias bool                       `protobuf:"varint,4,opt,name=overrideFieldPathFromAlias,proto3" json:"overrideFieldPathFromAlias,omitempty"`
	CustomRest                 *DataSourceCustom_REST     `protobuf:"bytes,5,opt,name=customRest,proto3" json:"customRest,omitempty"`
	CustomGraphql              *DataSourceCustom_GraphQL  `protobuf:"bytes,6,opt,name=customGraphql,proto3" json:"customGraphql,omitempty"`
	CustomStatic               *DataSourceCustom_Static   `protobuf:"bytes,7,opt,name=customStatic,proto3" json:"customStatic,omitempty"`
	CustomDatabase             *DataSourceCustom_Database `protobuf:"bytes,8,opt,name=customDatabase,proto3" json:"customDatabase,omitempty"`
	Directives                 []*DirectiveConfiguration  `protobuf:"bytes,9,rep,name=directives,proto3" json:"directives,omitempty"`
	RequestTimeoutSeconds      int64                      `protobuf:"varint,10,opt,name=requestTimeoutSeconds,proto3" json:"requestTimeoutSeconds,omitempty"`
	Id                         string                     `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DataSourceConfiguration) Reset() {
	*x = DataSourceConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceConfiguration) ProtoMessage() {}

func (x *DataSourceConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceConfiguration.ProtoReflect.Descriptor instead.
func (*DataSourceConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{27}
}

func (x *DataSourceConfiguration) GetKind() DataSourceKind {
	if x != nil {
		return x.Kind
	}
	return DataSourceKind_STATIC
}

func (x *DataSourceConfiguration) GetRootNodes() []*TypeField {
	if x != nil {
		return x.RootNodes
	}
	return nil
}

func (x *DataSourceConfiguration) GetChildNodes() []*TypeField {
	if x != nil {
		return x.ChildNodes
	}
	return nil
}

func (x *DataSourceConfiguration) GetOverrideFieldPathFromAlias() bool {
	if x != nil {
		return x.OverrideFieldPathFromAlias
	}
	return false
}

func (x *DataSourceConfiguration) GetCustomRest() *DataSourceCustom_REST {
	if x != nil {
		return x.CustomRest
	}
	return nil
}

func (x *DataSourceConfiguration) GetCustomGraphql() *DataSourceCustom_GraphQL {
	if x != nil {
		return x.CustomGraphql
	}
	return nil
}

func (x *DataSourceConfiguration) GetCustomStatic() *DataSourceCustom_Static {
	if x != nil {
		return x.CustomStatic
	}
	return nil
}

func (x *DataSourceConfiguration) GetCustomDatabase() *DataSourceCustom_Database {
	if x != nil {
		return x.CustomDatabase
	}
	return nil
}

func (x *DataSourceConfiguration) GetDirectives() []*DirectiveConfiguration {
	if x != nil {
		return x.Directives
	}
	return nil
}

func (x *DataSourceConfiguration) GetRequestTimeoutSeconds() int64 {
	if x != nil {
		return x.RequestTimeoutSeconds
	}
	return 0
}

func (x *DataSourceConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DirectiveConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectiveName string `protobuf:"bytes,1,opt,name=directiveName,proto3" json:"directiveName,omitempty"`
	RenameTo      string `protobuf:"bytes,2,opt,name=renameTo,proto3" json:"renameTo,omitempty"`
}

func (x *DirectiveConfiguration) Reset() {
	*x = DirectiveConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectiveConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectiveConfiguration) ProtoMessage() {}

func (x *DirectiveConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectiveConfiguration.ProtoReflect.Descriptor instead.
func (*DirectiveConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{28}
}

func (x *DirectiveConfiguration) GetDirectiveName() string {
	if x != nil {
		return x.DirectiveName
	}
	return ""
}

func (x *DirectiveConfiguration) GetRenameTo() string {
	if x != nil {
		return x.RenameTo
	}
	return ""
}

type DataSourceCustom_REST struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fetch                  *FetchConfiguration            `protobuf:"bytes,1,opt,name=fetch,proto3" json:"fetch,omitempty"`
	Subscription           *RESTSubscriptionConfiguration `protobuf:"bytes,2,opt,name=subscription,proto3" json:"subscription,omitempty"`
	StatusCodeTypeMappings []*StatusCodeTypeMapping       `protobuf:"bytes,3,rep,name=statusCodeTypeMappings,proto3" json:"statusCodeTypeMappings,omitempty"`
	DefaultTypeName        string                         `protobuf:"bytes,4,opt,name=defaultTypeName,proto3" json:"defaultTypeName,omitempty"`
}

func (x *DataSourceCustom_REST) Reset() {
	*x = DataSourceCustom_REST{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceCustom_REST) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceCustom_REST) ProtoMessage() {}

func (x *DataSourceCustom_REST) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceCustom_REST.ProtoReflect.Descriptor instead.
func (*DataSourceCustom_REST) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{29}
}

func (x *DataSourceCustom_REST) GetFetch() *FetchConfiguration {
	if x != nil {
		return x.Fetch
	}
	return nil
}

func (x *DataSourceCustom_REST) GetSubscription() *RESTSubscriptionConfiguration {
	if x != nil {
		return x.Subscription
	}
	return nil
}

func (x *DataSourceCustom_REST) GetStatusCodeTypeMappings() []*StatusCodeTypeMapping {
	if x != nil {
		return x.StatusCodeTypeMappings
	}
	return nil
}

func (x *DataSourceCustom_REST) GetDefaultTypeName() string {
	if x != nil {
		return x.DefaultTypeName
	}
	return ""
}

type StatusCodeTypeMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode               int64  `protobuf:"varint,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	TypeName                 string `protobuf:"bytes,2,opt,name=typeName,proto3" json:"typeName,omitempty"`
	InjectStatusCodeIntoBody bool   `protobuf:"varint,3,opt,name=injectStatusCodeIntoBody,proto3" json:"injectStatusCodeIntoBody,omitempty"`
}

func (x *StatusCodeTypeMapping) Reset() {
	*x = StatusCodeTypeMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusCodeTypeMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusCodeTypeMapping) ProtoMessage() {}

func (x *StatusCodeTypeMapping) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusCodeTypeMapping.ProtoReflect.Descriptor instead.
func (*StatusCodeTypeMapping) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{30}
}

func (x *StatusCodeTypeMapping) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *StatusCodeTypeMapping) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *StatusCodeTypeMapping) GetInjectStatusCodeIntoBody() bool {
	if x != nil {
		return x.InjectStatusCodeIntoBody
	}
	return false
}

type DataSourceCustom_GraphQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fetch                  *FetchConfiguration                  `protobuf:"bytes,1,opt,name=fetch,proto3" json:"fetch,omitempty"`
	Subscription           *GraphQLSubscriptionConfiguration    `protobuf:"bytes,2,opt,name=subscription,proto3" json:"subscription,omitempty"`
	Federation             *GraphQLFederationConfiguration      `protobuf:"bytes,3,opt,name=federation,proto3" json:"federation,omitempty"`
	UpstreamSchema         string                               `protobuf:"bytes,4,opt,name=upstreamSchema,proto3" json:"upstreamSchema,omitempty"`
	HooksConfiguration     *GraphQLDataSourceHooksConfiguration `protobuf:"bytes,5,opt,name=hooksConfiguration,proto3" json:"hooksConfiguration,omitempty"`
	CustomScalarTypeFields []*SingleTypeField                   `protobuf:"bytes,6,rep,name=customScalarTypeFields,proto3" json:"customScalarTypeFields,omitempty"`
}

func (x *DataSourceCustom_GraphQL) Reset() {
	*x = DataSourceCustom_GraphQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceCustom_GraphQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceCustom_GraphQL) ProtoMessage() {}

func (x *DataSourceCustom_GraphQL) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceCustom_GraphQL.ProtoReflect.Descriptor instead.
func (*DataSourceCustom_GraphQL) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{31}
}

func (x *DataSourceCustom_GraphQL) GetFetch() *FetchConfiguration {
	if x != nil {
		return x.Fetch
	}
	return nil
}

func (x *DataSourceCustom_GraphQL) GetSubscription() *GraphQLSubscriptionConfiguration {
	if x != nil {
		return x.Subscription
	}
	return nil
}

func (x *DataSourceCustom_GraphQL) GetFederation() *GraphQLFederationConfiguration {
	if x != nil {
		return x.Federation
	}
	return nil
}

func (x *DataSourceCustom_GraphQL) GetUpstreamSchema() string {
	if x != nil {
		return x.UpstreamSchema
	}
	return ""
}

func (x *DataSourceCustom_GraphQL) GetHooksConfiguration() *GraphQLDataSourceHooksConfiguration {
	if x != nil {
		return x.HooksConfiguration
	}
	return nil
}

func (x *DataSourceCustom_GraphQL) GetCustomScalarTypeFields() []*SingleTypeField {
	if x != nil {
		return x.CustomScalarTypeFields
	}
	return nil
}

type DataSourceCustom_Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseURL   *ConfigurationVariable `protobuf:"bytes,1,opt,name=databaseURL,proto3" json:"databaseURL,omitempty"`
	PrismaSchema  string                 `protobuf:"bytes,2,opt,name=prismaSchema,proto3" json:"prismaSchema,omitempty"`
	GraphqlSchema string                 `protobuf:"bytes,3,opt,name=graphqlSchema,proto3" json:"graphqlSchema,omitempty"`
	// closeTimeoutSeconds define that the database connection will be closed after the given amount of seconds of inactivity
	CloseTimeoutSeconds int64              `protobuf:"varint,4,opt,name=closeTimeoutSeconds,proto3" json:"closeTimeoutSeconds,omitempty"`
	JsonTypeFields      []*SingleTypeField `protobuf:"bytes,5,rep,name=jsonTypeFields,proto3" json:"jsonTypeFields,omitempty"`
	JsonInputVariables  []string           `protobuf:"bytes,6,rep,name=jsonInputVariables,proto3" json:"jsonInputVariables,omitempty"`
}

func (x *DataSourceCustom_Database) Reset() {
	*x = DataSourceCustom_Database{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceCustom_Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceCustom_Database) ProtoMessage() {}

func (x *DataSourceCustom_Database) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceCustom_Database.ProtoReflect.Descriptor instead.
func (*DataSourceCustom_Database) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{32}
}

func (x *DataSourceCustom_Database) GetDatabaseURL() *ConfigurationVariable {
	if x != nil {
		return x.DatabaseURL
	}
	return nil
}

func (x *DataSourceCustom_Database) GetPrismaSchema() string {
	if x != nil {
		return x.PrismaSchema
	}
	return ""
}

func (x *DataSourceCustom_Database) GetGraphqlSchema() string {
	if x != nil {
		return x.GraphqlSchema
	}
	return ""
}

func (x *DataSourceCustom_Database) GetCloseTimeoutSeconds() int64 {
	if x != nil {
		return x.CloseTimeoutSeconds
	}
	return 0
}

func (x *DataSourceCustom_Database) GetJsonTypeFields() []*SingleTypeField {
	if x != nil {
		return x.JsonTypeFields
	}
	return nil
}

func (x *DataSourceCustom_Database) GetJsonInputVariables() []string {
	if x != nil {
		return x.JsonInputVariables
	}
	return nil
}

type GraphQLFederationConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ServiceSdl string `protobuf:"bytes,2,opt,name=serviceSdl,proto3" json:"serviceSdl,omitempty"`
}

func (x *GraphQLFederationConfiguration) Reset() {
	*x = GraphQLFederationConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLFederationConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLFederationConfiguration) ProtoMessage() {}

func (x *GraphQLFederationConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLFederationConfiguration.ProtoReflect.Descriptor instead.
func (*GraphQLFederationConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{33}
}

func (x *GraphQLFederationConfiguration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GraphQLFederationConfiguration) GetServiceSdl() string {
	if x != nil {
		return x.ServiceSdl
	}
	return ""
}

type DataSourceCustom_Static struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ConfigurationVariable `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DataSourceCustom_Static) Reset() {
	*x = DataSourceCustom_Static{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceCustom_Static) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceCustom_Static) ProtoMessage() {}

func (x *DataSourceCustom_Static) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceCustom_Static.ProtoReflect.Descriptor instead.
func (*DataSourceCustom_Static) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{34}
}

func (x *DataSourceCustom_Static) GetData() *ConfigurationVariable {
	if x != nil {
		return x.Data
	}
	return nil
}

type GraphQLSubscriptionConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Url     *ConfigurationVariable `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	UseSSE  bool                   `protobuf:"varint,3,opt,name=useSSE,proto3" json:"useSSE,omitempty"`
}

func (x *GraphQLSubscriptionConfiguration) Reset() {
	*x = GraphQLSubscriptionConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQLSubscriptionConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQLSubscriptionConfiguration) ProtoMessage() {}

func (x *GraphQLSubscriptionConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQLSubscriptionConfiguration.ProtoReflect.Descriptor instead.
func (*GraphQLSubscriptionConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{35}
}

func (x *GraphQLSubscriptionConfiguration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GraphQLSubscriptionConfiguration) GetUrl() *ConfigurationVariable {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *GraphQLSubscriptionConfiguration) GetUseSSE() bool {
	if x != nil {
		return x.UseSSE
	}
	return false
}

type FetchConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// You should either configure url OR a combination of baseURL and path
	// If url resolves to a non empty string, it takes precedence over baseURL and path
	// If url resolves to an empty string, the url will be configured as "{{baseURL}}{{path}}"
	Url                    *ConfigurationVariable   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Method                 HTTPMethod               `protobuf:"varint,2,opt,name=method,proto3,enum=wgpb.HTTPMethod" json:"method,omitempty"`
	Header                 map[string]*HTTPHeader   `protobuf:"bytes,3,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body                   *ConfigurationVariable   `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Query                  []*URLQueryConfiguration `protobuf:"bytes,5,rep,name=query,proto3" json:"query,omitempty"`
	UpstreamAuthentication *UpstreamAuthentication  `protobuf:"bytes,6,opt,name=upstreamAuthentication,proto3" json:"upstreamAuthentication,omitempty"`
	// urlEncodeBody defines whether the body should be URL encoded or not
	// by default, the body will be JSON encoded
	// setting urlEncodeBody to true will render the body empty,
	// the Header Content-Type will be set to application/x-www-form-urlencoded,
	// and the body will be URL encoded and set as the URL Query String
	UrlEncodeBody bool                   `protobuf:"varint,7,opt,name=urlEncodeBody,proto3" json:"urlEncodeBody,omitempty"`
	MTLS          *MTLSConfiguration     `protobuf:"bytes,8,opt,name=mTLS,proto3" json:"mTLS,omitempty"`
	BaseUrl       *ConfigurationVariable `protobuf:"bytes,9,opt,name=baseUrl,proto3" json:"baseUrl,omitempty"`
	Path          *ConfigurationVariable `protobuf:"bytes,10,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FetchConfiguration) Reset() {
	*x = FetchConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchConfiguration) ProtoMessage() {}

func (x *FetchConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchConfiguration.ProtoReflect.Descriptor instead.
func (*FetchConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{36}
}

func (x *FetchConfiguration) GetUrl() *ConfigurationVariable {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *FetchConfiguration) GetMethod() HTTPMethod {
	if x != nil {
		return x.Method
	}
	return HTTPMethod_GET
}

func (x *FetchConfiguration) GetHeader() map[string]*HTTPHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FetchConfiguration) GetBody() *ConfigurationVariable {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *FetchConfiguration) GetQuery() []*URLQueryConfiguration {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *FetchConfiguration) GetUpstreamAuthentication() *UpstreamAuthentication {
	if x != nil {
		return x.UpstreamAuthentication
	}
	return nil
}

func (x *FetchConfiguration) GetUrlEncodeBody() bool {
	if x != nil {
		return x.UrlEncodeBody
	}
	return false
}

func (x *FetchConfiguration) GetMTLS() *MTLSConfiguration {
	if x != nil {
		return x.MTLS
	}
	return nil
}

func (x *FetchConfiguration) GetBaseUrl() *ConfigurationVariable {
	if x != nil {
		return x.BaseUrl
	}
	return nil
}

func (x *FetchConfiguration) GetPath() *ConfigurationVariable {
	if x != nil {
		return x.Path
	}
	return nil
}

type MTLSConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                *ConfigurationVariable `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Cert               *ConfigurationVariable `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	InsecureSkipVerify bool                   `protobuf:"varint,3,opt,name=insecureSkipVerify,proto3" json:"insecureSkipVerify,omitempty"`
}

func (x *MTLSConfiguration) Reset() {
	*x = MTLSConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTLSConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTLSConfiguration) ProtoMessage() {}

func (x *MTLSConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTLSConfiguration.ProtoReflect.Descriptor instead.
func (*MTLSConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{37}
}

func (x *MTLSConfiguration) GetKey() *ConfigurationVariable {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MTLSConfiguration) GetCert() *ConfigurationVariable {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *MTLSConfiguration) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

type UpstreamAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind                             UpstreamAuthenticationKind                        `protobuf:"varint,1,opt,name=kind,proto3,enum=wgpb.UpstreamAuthenticationKind" json:"kind,omitempty"`
	JwtConfig                        *JwtUpstreamAuthenticationConfig                  `protobuf:"bytes,2,opt,name=jwtConfig,proto3" json:"jwtConfig,omitempty"`
	JwtWithAccessTokenExchangeConfig *JwtUpstreamAuthenticationWithAccessTokenExchange `protobuf:"bytes,3,opt,name=jwtWithAccessTokenExchangeConfig,proto3" json:"jwtWithAccessTokenExchangeConfig,omitempty"`
}

func (x *UpstreamAuthentication) Reset() {
	*x = UpstreamAuthentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamAuthentication) ProtoMessage() {}

func (x *UpstreamAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamAuthentication.ProtoReflect.Descriptor instead.
func (*UpstreamAuthentication) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{38}
}

func (x *UpstreamAuthentication) GetKind() UpstreamAuthenticationKind {
	if x != nil {
		return x.Kind
	}
	return UpstreamAuthenticationKind_UpstreamAuthenticationJWT
}

func (x *UpstreamAuthentication) GetJwtConfig() *JwtUpstreamAuthenticationConfig {
	if x != nil {
		return x.JwtConfig
	}
	return nil
}

func (x *UpstreamAuthentication) GetJwtWithAccessTokenExchangeConfig() *JwtUpstreamAuthenticationWithAccessTokenExchange {
	if x != nil {
		return x.JwtWithAccessTokenExchangeConfig
	}
	return nil
}

type JwtUpstreamAuthenticationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret        *ConfigurationVariable `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	SigningMethod SigningMethod          `protobuf:"varint,2,opt,name=signingMethod,proto3,enum=wgpb.SigningMethod" json:"signingMethod,omitempty"`
}

func (x *JwtUpstreamAuthenticationConfig) Reset() {
	*x = JwtUpstreamAuthenticationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtUpstreamAuthenticationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtUpstreamAuthenticationConfig) ProtoMessage() {}

func (x *JwtUpstreamAuthenticationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtUpstreamAuthenticationConfig.ProtoReflect.Descriptor instead.
func (*JwtUpstreamAuthenticationConfig) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{39}
}

func (x *JwtUpstreamAuthenticationConfig) GetSecret() *ConfigurationVariable {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *JwtUpstreamAuthenticationConfig) GetSigningMethod() SigningMethod {
	if x != nil {
		return x.SigningMethod
	}
	return SigningMethod_SigningMethodHS256
}

type JwtUpstreamAuthenticationWithAccessTokenExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret                      *ConfigurationVariable `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	SigningMethod               SigningMethod          `protobuf:"varint,2,opt,name=signingMethod,proto3,enum=wgpb.SigningMethod" json:"signingMethod,omitempty"`
	AccessTokenExchangeEndpoint *ConfigurationVariable `protobuf:"bytes,3,opt,name=accessTokenExchangeEndpoint,proto3" json:"accessTokenExchangeEndpoint,omitempty"`
}

func (x *JwtUpstreamAuthenticationWithAccessTokenExchange) Reset() {
	*x = JwtUpstreamAuthenticationWithAccessTokenExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtUpstreamAuthenticationWithAccessTokenExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtUpstreamAuthenticationWithAccessTokenExchange) ProtoMessage() {}

func (x *JwtUpstreamAuthenticationWithAccessTokenExchange) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtUpstreamAuthenticationWithAccessTokenExchange.ProtoReflect.Descriptor instead.
func (*JwtUpstreamAuthenticationWithAccessTokenExchange) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{40}
}

func (x *JwtUpstreamAuthenticationWithAccessTokenExchange) GetSecret() *ConfigurationVariable {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *JwtUpstreamAuthenticationWithAccessTokenExchange) GetSigningMethod() SigningMethod {
	if x != nil {
		return x.SigningMethod
	}
	return SigningMethod_SigningMethodHS256
}

func (x *JwtUpstreamAuthenticationWithAccessTokenExchange) GetAccessTokenExchangeEndpoint() *ConfigurationVariable {
	if x != nil {
		return x.AccessTokenExchangeEndpoint
	}
	return nil
}

type RESTSubscriptionConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled                 bool  `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	PollingIntervalMillis   int64 `protobuf:"varint,2,opt,name=pollingIntervalMillis,proto3" json:"pollingIntervalMillis,omitempty"`
	SkipPublishSameResponse bool  `protobuf:"varint,3,opt,name=skipPublishSameResponse,proto3" json:"skipPublishSameResponse,omitempty"`
}

func (x *RESTSubscriptionConfiguration) Reset() {
	*x = RESTSubscriptionConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RESTSubscriptionConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RESTSubscriptionConfiguration) ProtoMessage() {}

func (x *RESTSubscriptionConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RESTSubscriptionConfiguration.ProtoReflect.Descriptor instead.
func (*RESTSubscriptionConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{41}
}

func (x *RESTSubscriptionConfiguration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *RESTSubscriptionConfiguration) GetPollingIntervalMillis() int64 {
	if x != nil {
		return x.PollingIntervalMillis
	}
	return 0
}

func (x *RESTSubscriptionConfiguration) GetSkipPublishSameResponse() bool {
	if x != nil {
		return x.SkipPublishSameResponse
	}
	return false
}

type URLQueryConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *URLQueryConfiguration) Reset() {
	*x = URLQueryConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URLQueryConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URLQueryConfiguration) ProtoMessage() {}

func (x *URLQueryConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URLQueryConfiguration.ProtoReflect.Descriptor instead.
func (*URLQueryConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{42}
}

func (x *URLQueryConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *URLQueryConfiguration) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HTTPHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*ConfigurationVariable `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *HTTPHeader) Reset() {
	*x = HTTPHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPHeader) ProtoMessage() {}

func (x *HTTPHeader) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPHeader.ProtoReflect.Descriptor instead.
func (*HTTPHeader) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{43}
}

func (x *HTTPHeader) GetValues() []*ConfigurationVariable {
	if x != nil {
		return x.Values
	}
	return nil
}

type TypeConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName string `protobuf:"bytes,1,opt,name=typeName,proto3" json:"typeName,omitempty"`
	RenameTo string `protobuf:"bytes,2,opt,name=renameTo,proto3" json:"renameTo,omitempty"`
}

func (x *TypeConfiguration) Reset() {
	*x = TypeConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeConfiguration) ProtoMessage() {}

func (x *TypeConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeConfiguration.ProtoReflect.Descriptor instead.
func (*TypeConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{44}
}

func (x *TypeConfiguration) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *TypeConfiguration) GetRenameTo() string {
	if x != nil {
		return x.RenameTo
	}
	return ""
}

type FieldConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName                   string                   `protobuf:"bytes,1,opt,name=typeName,proto3" json:"typeName,omitempty"`
	FieldName                  string                   `protobuf:"bytes,2,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	DisableDefaultFieldMapping bool                     `protobuf:"varint,3,opt,name=disableDefaultFieldMapping,proto3" json:"disableDefaultFieldMapping,omitempty"`
	Path                       []string                 `protobuf:"bytes,4,rep,name=path,proto3" json:"path,omitempty"`
	ArgumentsConfiguration     []*ArgumentConfiguration `protobuf:"bytes,6,rep,name=argumentsConfiguration,proto3" json:"argumentsConfiguration,omitempty"`
	RequiresFields             []string                 `protobuf:"bytes,7,rep,name=requiresFields,proto3" json:"requiresFields,omitempty"`
	UnescapeResponseJson       bool                     `protobuf:"varint,8,opt,name=unescapeResponseJson,proto3" json:"unescapeResponseJson,omitempty"`
}

func (x *FieldConfiguration) Reset() {
	*x = FieldConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldConfiguration) ProtoMessage() {}

func (x *FieldConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldConfiguration.ProtoReflect.Descriptor instead.
func (*FieldConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{45}
}

func (x *FieldConfiguration) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *FieldConfiguration) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *FieldConfiguration) GetDisableDefaultFieldMapping() bool {
	if x != nil {
		return x.DisableDefaultFieldMapping
	}
	return false
}

func (x *FieldConfiguration) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *FieldConfiguration) GetArgumentsConfiguration() []*ArgumentConfiguration {
	if x != nil {
		return x.ArgumentsConfiguration
	}
	return nil
}

func (x *FieldConfiguration) GetRequiresFields() []string {
	if x != nil {
		return x.RequiresFields
	}
	return nil
}

func (x *FieldConfiguration) GetUnescapeResponseJson() bool {
	if x != nil {
		return x.UnescapeResponseJson
	}
	return false
}

type TypeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName   string   `protobuf:"bytes,1,opt,name=typeName,proto3" json:"typeName,omitempty"`
	FieldNames []string `protobuf:"bytes,2,rep,name=fieldNames,proto3" json:"fieldNames,omitempty"`
}

func (x *TypeField) Reset() {
	*x = TypeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeField) ProtoMessage() {}

func (x *TypeField) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeField.ProtoReflect.Descriptor instead.
func (*TypeField) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{46}
}

func (x *TypeField) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *TypeField) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

type SingleTypeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName  string `protobuf:"bytes,1,opt,name=typeName,proto3" json:"typeName,omitempty"`
	FieldName string `protobuf:"bytes,2,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
}

func (x *SingleTypeField) Reset() {
	*x = SingleTypeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleTypeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleTypeField) ProtoMessage() {}

func (x *SingleTypeField) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleTypeField.ProtoReflect.Descriptor instead.
func (*SingleTypeField) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{47}
}

func (x *SingleTypeField) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *SingleTypeField) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

type ArgumentConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SourceType          ArgumentSource              `protobuf:"varint,2,opt,name=sourceType,proto3,enum=wgpb.ArgumentSource" json:"sourceType,omitempty"`
	SourcePath          []string                    `protobuf:"bytes,3,rep,name=sourcePath,proto3" json:"sourcePath,omitempty"`
	RenderConfiguration ArgumentRenderConfiguration `protobuf:"varint,4,opt,name=renderConfiguration,proto3,enum=wgpb.ArgumentRenderConfiguration" json:"renderConfiguration,omitempty"`
}

func (x *ArgumentConfiguration) Reset() {
	*x = ArgumentConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgumentConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgumentConfiguration) ProtoMessage() {}

func (x *ArgumentConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgumentConfiguration.ProtoReflect.Descriptor instead.
func (*ArgumentConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{48}
}

func (x *ArgumentConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArgumentConfiguration) GetSourceType() ArgumentSource {
	if x != nil {
		return x.SourceType
	}
	return ArgumentSource_OBJECT_FIELD
}

func (x *ArgumentConfiguration) GetSourcePath() []string {
	if x != nil {
		return x.SourcePath
	}
	return nil
}

func (x *ArgumentConfiguration) GetRenderConfiguration() ArgumentRenderConfiguration {
	if x != nil {
		return x.RenderConfiguration
	}
	return ArgumentRenderConfiguration_RENDER_ARGUMENT_DEFAULT
}

type WunderGraphConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api                              *UserDefinedApi `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	ApiId                            string          `protobuf:"bytes,2,opt,name=apiId,proto3" json:"apiId,omitempty"`
	EnvironmentIds                   []string        `protobuf:"bytes,3,rep,name=environmentIds,proto3" json:"environmentIds,omitempty"`
	DangerouslyEnableGraphQLEndpoint bool            `protobuf:"varint,4,opt,name=dangerouslyEnableGraphQLEndpoint,proto3" json:"dangerouslyEnableGraphQLEndpoint,omitempty"`
}

func (x *WunderGraphConfiguration) Reset() {
	*x = WunderGraphConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WunderGraphConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WunderGraphConfiguration) ProtoMessage() {}

func (x *WunderGraphConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WunderGraphConfiguration.ProtoReflect.Descriptor instead.
func (*WunderGraphConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{49}
}

func (x *WunderGraphConfiguration) GetApi() *UserDefinedApi {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *WunderGraphConfiguration) GetApiId() string {
	if x != nil {
		return x.ApiId
	}
	return ""
}

func (x *WunderGraphConfiguration) GetEnvironmentIds() []string {
	if x != nil {
		return x.EnvironmentIds
	}
	return nil
}

func (x *WunderGraphConfiguration) GetDangerouslyEnableGraphQLEndpoint() bool {
	if x != nil {
		return x.DangerouslyEnableGraphQLEndpoint
	}
	return false
}

type S3UploadProfileHooksConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreUpload  bool `protobuf:"varint,1,opt,name=preUpload,proto3" json:"preUpload,omitempty"`
	PostUpload bool `protobuf:"varint,2,opt,name=postUpload,proto3" json:"postUpload,omitempty"`
}

func (x *S3UploadProfileHooksConfiguration) Reset() {
	*x = S3UploadProfileHooksConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3UploadProfileHooksConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3UploadProfileHooksConfiguration) ProtoMessage() {}

func (x *S3UploadProfileHooksConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3UploadProfileHooksConfiguration.ProtoReflect.Descriptor instead.
func (*S3UploadProfileHooksConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{50}
}

func (x *S3UploadProfileHooksConfiguration) GetPreUpload() bool {
	if x != nil {
		return x.PreUpload
	}
	return false
}

func (x *S3UploadProfileHooksConfiguration) GetPostUpload() bool {
	if x != nil {
		return x.PostUpload
	}
	return false
}

type S3UploadProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAllowedUploadSizeBytes int32                              `protobuf:"varint,1,opt,name=maxAllowedUploadSizeBytes,proto3" json:"maxAllowedUploadSizeBytes,omitempty"`
	MaxAllowedFiles           int32                              `protobuf:"varint,2,opt,name=maxAllowedFiles,proto3" json:"maxAllowedFiles,omitempty"`
	AllowedMimeTypes          []string                           `protobuf:"bytes,3,rep,name=allowedMimeTypes,proto3" json:"allowedMimeTypes,omitempty"`
	AllowedFileExtensions     []string                           `protobuf:"bytes,4,rep,name=allowedFileExtensions,proto3" json:"allowedFileExtensions,omitempty"`
	MetadataJSONSchema        string                             `protobuf:"bytes,5,opt,name=metadataJSONSchema,proto3" json:"metadataJSONSchema,omitempty"`
	Hooks                     *S3UploadProfileHooksConfiguration `protobuf:"bytes,6,opt,name=hooks,proto3" json:"hooks,omitempty"`
}

func (x *S3UploadProfile) Reset() {
	*x = S3UploadProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3UploadProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3UploadProfile) ProtoMessage() {}

func (x *S3UploadProfile) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3UploadProfile.ProtoReflect.Descriptor instead.
func (*S3UploadProfile) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{51}
}

func (x *S3UploadProfile) GetMaxAllowedUploadSizeBytes() int32 {
	if x != nil {
		return x.MaxAllowedUploadSizeBytes
	}
	return 0
}

func (x *S3UploadProfile) GetMaxAllowedFiles() int32 {
	if x != nil {
		return x.MaxAllowedFiles
	}
	return 0
}

func (x *S3UploadProfile) GetAllowedMimeTypes() []string {
	if x != nil {
		return x.AllowedMimeTypes
	}
	return nil
}

func (x *S3UploadProfile) GetAllowedFileExtensions() []string {
	if x != nil {
		return x.AllowedFileExtensions
	}
	return nil
}

func (x *S3UploadProfile) GetMetadataJSONSchema() string {
	if x != nil {
		return x.MetadataJSONSchema
	}
	return ""
}

func (x *S3UploadProfile) GetHooks() *S3UploadProfileHooksConfiguration {
	if x != nil {
		return x.Hooks
	}
	return nil
}

type S3UploadConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Endpoint        *ConfigurationVariable      `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	AccessKeyID     *ConfigurationVariable      `protobuf:"bytes,3,opt,name=accessKeyID,proto3" json:"accessKeyID,omitempty"`
	SecretAccessKey *ConfigurationVariable      `protobuf:"bytes,4,opt,name=secretAccessKey,proto3" json:"secretAccessKey,omitempty"`
	BucketName      *ConfigurationVariable      `protobuf:"bytes,5,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	BucketLocation  *ConfigurationVariable      `protobuf:"bytes,6,opt,name=bucketLocation,proto3" json:"bucketLocation,omitempty"`
	UseSSL          bool                        `protobuf:"varint,7,opt,name=useSSL,proto3" json:"useSSL,omitempty"`
	UploadProfiles  map[string]*S3UploadProfile `protobuf:"bytes,8,rep,name=uploadProfiles,proto3" json:"uploadProfiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *S3UploadConfiguration) Reset() {
	*x = S3UploadConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3UploadConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3UploadConfiguration) ProtoMessage() {}

func (x *S3UploadConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3UploadConfiguration.ProtoReflect.Descriptor instead.
func (*S3UploadConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{52}
}

func (x *S3UploadConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *S3UploadConfiguration) GetEndpoint() *ConfigurationVariable {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *S3UploadConfiguration) GetAccessKeyID() *ConfigurationVariable {
	if x != nil {
		return x.AccessKeyID
	}
	return nil
}

func (x *S3UploadConfiguration) GetSecretAccessKey() *ConfigurationVariable {
	if x != nil {
		return x.SecretAccessKey
	}
	return nil
}

func (x *S3UploadConfiguration) GetBucketName() *ConfigurationVariable {
	if x != nil {
		return x.BucketName
	}
	return nil
}

func (x *S3UploadConfiguration) GetBucketLocation() *ConfigurationVariable {
	if x != nil {
		return x.BucketLocation
	}
	return nil
}

func (x *S3UploadConfiguration) GetUseSSL() bool {
	if x != nil {
		return x.UseSSL
	}
	return false
}

func (x *S3UploadConfiguration) GetUploadProfiles() map[string]*S3UploadProfile {
	if x != nil {
		return x.UploadProfiles
	}
	return nil
}

type UserDefinedApi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EngineConfiguration   *EngineConfiguration     `protobuf:"bytes,3,opt,name=engineConfiguration,proto3" json:"engineConfiguration,omitempty"`
	EnableGraphqlEndpoint bool                     `protobuf:"varint,5,opt,name=enableGraphqlEndpoint,proto3" json:"enableGraphqlEndpoint,omitempty"`
	Operations            []*Operation             `protobuf:"bytes,6,rep,name=operations,proto3" json:"operations,omitempty"`
	InvalidOperationNames []string                 `protobuf:"bytes,16,rep,name=invalidOperationNames,proto3" json:"invalidOperationNames,omitempty"`
	CorsConfiguration     *CorsConfiguration       `protobuf:"bytes,7,opt,name=corsConfiguration,proto3" json:"corsConfiguration,omitempty"`
	AuthenticationConfig  *ApiAuthenticationConfig `protobuf:"bytes,8,opt,name=authenticationConfig,proto3" json:"authenticationConfig,omitempty"`
	S3UploadConfiguration []*S3UploadConfiguration `protobuf:"bytes,9,rep,name=s3UploadConfiguration,proto3" json:"s3UploadConfiguration,omitempty"`
	AllowedHostNames      []*ConfigurationVariable `protobuf:"bytes,11,rep,name=allowedHostNames,proto3" json:"allowedHostNames,omitempty"`
	Webhooks              []*WebhookConfiguration  `protobuf:"bytes,12,rep,name=webhooks,proto3" json:"webhooks,omitempty"`
	ServerOptions         *ServerOptions           `protobuf:"bytes,14,opt,name=serverOptions,proto3" json:"serverOptions,omitempty"`
	NodeOptions           *NodeOptions             `protobuf:"bytes,15,opt,name=nodeOptions,proto3" json:"nodeOptions,omitempty"`
}

func (x *UserDefinedApi) Reset() {
	*x = UserDefinedApi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDefinedApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDefinedApi) ProtoMessage() {}

func (x *UserDefinedApi) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDefinedApi.ProtoReflect.Descriptor instead.
func (*UserDefinedApi) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{53}
}

func (x *UserDefinedApi) GetEngineConfiguration() *EngineConfiguration {
	if x != nil {
		return x.EngineConfiguration
	}
	return nil
}

func (x *UserDefinedApi) GetEnableGraphqlEndpoint() bool {
	if x != nil {
		return x.EnableGraphqlEndpoint
	}
	return false
}

func (x *UserDefinedApi) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *UserDefinedApi) GetInvalidOperationNames() []string {
	if x != nil {
		return x.InvalidOperationNames
	}
	return nil
}

func (x *UserDefinedApi) GetCorsConfiguration() *CorsConfiguration {
	if x != nil {
		return x.CorsConfiguration
	}
	return nil
}

func (x *UserDefinedApi) GetAuthenticationConfig() *ApiAuthenticationConfig {
	if x != nil {
		return x.AuthenticationConfig
	}
	return nil
}

func (x *UserDefinedApi) GetS3UploadConfiguration() []*S3UploadConfiguration {
	if x != nil {
		return x.S3UploadConfiguration
	}
	return nil
}

func (x *UserDefinedApi) GetAllowedHostNames() []*ConfigurationVariable {
	if x != nil {
		return x.AllowedHostNames
	}
	return nil
}

func (x *UserDefinedApi) GetWebhooks() []*WebhookConfiguration {
	if x != nil {
		return x.Webhooks
	}
	return nil
}

func (x *UserDefinedApi) GetServerOptions() *ServerOptions {
	if x != nil {
		return x.ServerOptions
	}
	return nil
}

func (x *UserDefinedApi) GetNodeOptions() *NodeOptions {
	if x != nil {
		return x.NodeOptions
	}
	return nil
}

type ListenerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host *ConfigurationVariable `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port *ConfigurationVariable `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ListenerOptions) Reset() {
	*x = ListenerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerOptions) ProtoMessage() {}

func (x *ListenerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerOptions.ProtoReflect.Descriptor instead.
func (*ListenerOptions) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{54}
}

func (x *ListenerOptions) GetHost() *ConfigurationVariable {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *ListenerOptions) GetPort() *ConfigurationVariable {
	if x != nil {
		return x.Port
	}
	return nil
}

type NodeLogging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level *ConfigurationVariable `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *NodeLogging) Reset() {
	*x = NodeLogging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeLogging) ProtoMessage() {}

func (x *NodeLogging) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeLogging.ProtoReflect.Descriptor instead.
func (*NodeLogging) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{55}
}

func (x *NodeLogging) GetLevel() *ConfigurationVariable {
	if x != nil {
		return x.Level
	}
	return nil
}

type NodeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeUrl                      *ConfigurationVariable `protobuf:"bytes,1,opt,name=nodeUrl,proto3" json:"nodeUrl,omitempty"`
	PublicNodeUrl                *ConfigurationVariable `protobuf:"bytes,4,opt,name=publicNodeUrl,proto3" json:"publicNodeUrl,omitempty"`
	Listen                       *ListenerOptions       `protobuf:"bytes,2,opt,name=listen,proto3" json:"listen,omitempty"`
	Logger                       *NodeLogging           `protobuf:"bytes,3,opt,name=logger,proto3" json:"logger,omitempty"`
	DefaultRequestTimeoutSeconds int64                  `protobuf:"varint,5,opt,name=defaultRequestTimeoutSeconds,proto3" json:"defaultRequestTimeoutSeconds,omitempty"`
}

func (x *NodeOptions) Reset() {
	*x = NodeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeOptions) ProtoMessage() {}

func (x *NodeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeOptions.ProtoReflect.Descriptor instead.
func (*NodeOptions) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{56}
}

func (x *NodeOptions) GetNodeUrl() *ConfigurationVariable {
	if x != nil {
		return x.NodeUrl
	}
	return nil
}

func (x *NodeOptions) GetPublicNodeUrl() *ConfigurationVariable {
	if x != nil {
		return x.PublicNodeUrl
	}
	return nil
}

func (x *NodeOptions) GetListen() *ListenerOptions {
	if x != nil {
		return x.Listen
	}
	return nil
}

func (x *NodeOptions) GetLogger() *NodeLogging {
	if x != nil {
		return x.Logger
	}
	return nil
}

func (x *NodeOptions) GetDefaultRequestTimeoutSeconds() int64 {
	if x != nil {
		return x.DefaultRequestTimeoutSeconds
	}
	return 0
}

type ServerLogging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level *ConfigurationVariable `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *ServerLogging) Reset() {
	*x = ServerLogging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerLogging) ProtoMessage() {}

func (x *ServerLogging) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerLogging.ProtoReflect.Descriptor instead.
func (*ServerLogging) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{57}
}

func (x *ServerLogging) GetLevel() *ConfigurationVariable {
	if x != nil {
		return x.Level
	}
	return nil
}

type ServerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUrl *ConfigurationVariable `protobuf:"bytes,1,opt,name=serverUrl,proto3" json:"serverUrl,omitempty"`
	Listen    *ListenerOptions       `protobuf:"bytes,2,opt,name=listen,proto3" json:"listen,omitempty"`
	Logger    *ServerLogging         `protobuf:"bytes,3,opt,name=logger,proto3" json:"logger,omitempty"`
}

func (x *ServerOptions) Reset() {
	*x = ServerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerOptions) ProtoMessage() {}

func (x *ServerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerOptions.ProtoReflect.Descriptor instead.
func (*ServerOptions) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{58}
}

func (x *ServerOptions) GetServerUrl() *ConfigurationVariable {
	if x != nil {
		return x.ServerUrl
	}
	return nil
}

func (x *ServerOptions) GetListen() *ListenerOptions {
	if x != nil {
		return x.Listen
	}
	return nil
}

func (x *ServerOptions) GetLogger() *ServerLogging {
	if x != nil {
		return x.Logger
	}
	return nil
}

type WebhookConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the webhook.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The path to the bundled file.
	// The path is relative to the bundle directory.
	FilePath string           `protobuf:"bytes,2,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Verifier *WebhookVerifier `protobuf:"bytes,3,opt,name=verifier,proto3" json:"verifier,omitempty"`
}

func (x *WebhookConfiguration) Reset() {
	*x = WebhookConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookConfiguration) ProtoMessage() {}

func (x *WebhookConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookConfiguration.ProtoReflect.Descriptor instead.
func (*WebhookConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{59}
}

func (x *WebhookConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebhookConfiguration) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *WebhookConfiguration) GetVerifier() *WebhookVerifier {
	if x != nil {
		return x.Verifier
	}
	return nil
}

type WebhookVerifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind                  WebhookVerifierKind    `protobuf:"varint,1,opt,name=kind,proto3,enum=wgpb.WebhookVerifierKind" json:"kind,omitempty"`
	Secret                *ConfigurationVariable `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	SignatureHeader       string                 `protobuf:"bytes,3,opt,name=signatureHeader,proto3" json:"signatureHeader,omitempty"`
	SignatureHeaderPrefix string                 `protobuf:"bytes,4,opt,name=signatureHeaderPrefix,proto3" json:"signatureHeaderPrefix,omitempty"`
}

func (x *WebhookVerifier) Reset() {
	*x = WebhookVerifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookVerifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookVerifier) ProtoMessage() {}

func (x *WebhookVerifier) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookVerifier.ProtoReflect.Descriptor instead.
func (*WebhookVerifier) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{60}
}

func (x *WebhookVerifier) GetKind() WebhookVerifierKind {
	if x != nil {
		return x.Kind
	}
	return WebhookVerifierKind_HMAC_SHA256
}

func (x *WebhookVerifier) GetSecret() *ConfigurationVariable {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *WebhookVerifier) GetSignatureHeader() string {
	if x != nil {
		return x.SignatureHeader
	}
	return ""
}

func (x *WebhookVerifier) GetSignatureHeaderPrefix() string {
	if x != nil {
		return x.SignatureHeaderPrefix
	}
	return ""
}

type CorsConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AllowedOrigins is a list of origins a cross-domain request can be executed from.
	// If the special "*" value is present in the list, all origins will be allowed.
	// An origin may contain a wildcard (*) to replace 0 or more characters
	// (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penalty.
	// Only one wildcard can be used per origin.
	// Default value is ["*"]
	AllowedOrigins []*ConfigurationVariable `protobuf:"bytes,1,rep,name=allowedOrigins,proto3" json:"allowedOrigins,omitempty"`
	// AllowedMethods is a list of methods the client is allowed to use with
	// cross-domain requests. Default value is simple methods (HEAD, GET and POST).
	AllowedMethods []string `protobuf:"bytes,2,rep,name=allowedMethods,proto3" json:"allowedMethods,omitempty"`
	// AllowedHeaders is list of non simple headers the client is allowed to use with
	// cross-domain requests.
	// If the special "*" value is present in the list, all headers will be allowed.
	// Default value is [] but "Origin" is always appended to the list.
	AllowedHeaders []string `protobuf:"bytes,3,rep,name=allowedHeaders,proto3" json:"allowedHeaders,omitempty"`
	// ExposedHeaders indicates which headers are safe to expose to the API of a CORS
	// API specification
	ExposedHeaders []string `protobuf:"bytes,4,rep,name=exposedHeaders,proto3" json:"exposedHeaders,omitempty"`
	// MaxAge indicates how long (in seconds) the results of a preflight request
	// can be cached
	MaxAge int64 `protobuf:"varint,5,opt,name=maxAge,proto3" json:"maxAge,omitempty"`
	// AllowCredentials indicates whether the request can include user credentials like
	// cookies, HTTP authentication or client side SSL certificates.
	AllowCredentials bool `protobuf:"varint,6,opt,name=allowCredentials,proto3" json:"allowCredentials,omitempty"`
}

func (x *CorsConfiguration) Reset() {
	*x = CorsConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorsConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorsConfiguration) ProtoMessage() {}

func (x *CorsConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorsConfiguration.ProtoReflect.Descriptor instead.
func (*CorsConfiguration) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{61}
}

func (x *CorsConfiguration) GetAllowedOrigins() []*ConfigurationVariable {
	if x != nil {
		return x.AllowedOrigins
	}
	return nil
}

func (x *CorsConfiguration) GetAllowedMethods() []string {
	if x != nil {
		return x.AllowedMethods
	}
	return nil
}

func (x *CorsConfiguration) GetAllowedHeaders() []string {
	if x != nil {
		return x.AllowedHeaders
	}
	return nil
}

func (x *CorsConfiguration) GetExposedHeaders() []string {
	if x != nil {
		return x.ExposedHeaders
	}
	return nil
}

func (x *CorsConfiguration) GetMaxAge() int64 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *CorsConfiguration) GetAllowCredentials() bool {
	if x != nil {
		return x.AllowCredentials
	}
	return false
}

type ConfigurationVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind                            ConfigurationVariableKind `protobuf:"varint,1,opt,name=kind,proto3,enum=wgpb.ConfigurationVariableKind" json:"kind,omitempty"`
	StaticVariableContent           string                    `protobuf:"bytes,2,opt,name=staticVariableContent,proto3" json:"staticVariableContent,omitempty"`
	EnvironmentVariableName         string                    `protobuf:"bytes,3,opt,name=environmentVariableName,proto3" json:"environmentVariableName,omitempty"`
	EnvironmentVariableDefaultValue string                    `protobuf:"bytes,4,opt,name=environmentVariableDefaultValue,proto3" json:"environmentVariableDefaultValue,omitempty"`
	PlaceholderVariableName         string                    `protobuf:"bytes,5,opt,name=placeholderVariableName,proto3" json:"placeholderVariableName,omitempty"`
}

func (x *ConfigurationVariable) Reset() {
	*x = ConfigurationVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wundernode_config_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationVariable) ProtoMessage() {}

func (x *ConfigurationVariable) ProtoReflect() protoreflect.Message {
	mi := &file_wundernode_config_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationVariable.ProtoReflect.Descriptor instead.
func (*ConfigurationVariable) Descriptor() ([]byte, []int) {
	return file_wundernode_config_proto_rawDescGZIP(), []int{62}
}

func (x *ConfigurationVariable) GetKind() ConfigurationVariableKind {
	if x != nil {
		return x.Kind
	}
	return ConfigurationVariableKind_STATIC_CONFIGURATION_VARIABLE
}

func (x *ConfigurationVariable) GetStaticVariableContent() string {
	if x != nil {
		return x.StaticVariableContent
	}
	return ""
}

func (x *ConfigurationVariable) GetEnvironmentVariableName() string {
	if x != nil {
		return x.EnvironmentVariableName
	}
	return ""
}

func (x *ConfigurationVariable) GetEnvironmentVariableDefaultValue() string {
	if x != nil {
		return x.EnvironmentVariableDefaultValue
	}
	return ""
}

func (x *ConfigurationVariable) GetPlaceholderVariableName() string {
	if x != nil {
		return x.PlaceholderVariableName
	}
	return ""
}

var File_wundernode_config_proto protoreflect.FileDescriptor

var file_wundernode_config_proto_rawDesc = []byte{
	0x0a, 0x17, 0x77, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x77, 0x67, 0x70, 0x62, 0x22,
	0xcd, 0x01, 0x0a, 0x17, 0x41, 0x70, 0x69, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x0b, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x77, 0x67, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x05, 0x68, 0x6f, 0x6f,
	0x6b, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x6a, 0x77, 0x6b, 0x73, 0x42, 0x61, 0x73, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x4a, 0x77, 0x6b,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6a, 0x77, 0x6b, 0x73, 0x42, 0x61, 0x73, 0x65, 0x64, 0x22,
	0x4f, 0x0a, 0x17, 0x4a, 0x77, 0x6b, 0x73, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x77, 0x67, 0x70, 0x62, 0x2e, 0x4a, 0x77, 0x6b, 0x73, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x22, 0x85, 0x02, 0x0a, 0x10, 0x4a, 0x77, 0x6b, 0x73, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x6a, 0x77, 0x6b, 0x73, 0x55, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x07, 0x6a, 0x77, 0x6b, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x08,
	0x6a, 0x77, 0x6b, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x6a, 0x77, 0x6b,
	0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54,
	0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x17, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x74,
	0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x16, 0x41, 0x70, 0x69,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f,
	0x6f, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x22,
	0xb0, 0x03, 0x0a, 0x19, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x53, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x16, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x55, 0x72, 0x69, 0x73, 0x12, 0x5f, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x1c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x08,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x73, 0x72, 0x66, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0a, 0x63, 0x73, 0x72, 0x66, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x42, 0x0a, 0x0c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0a, 0x6f, 0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x44, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x6f, 0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x94, 0x01, 0x0a, 0x18, 0x47,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0e, 0x41, 0x70, 0x69, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x41, 0x70,
	0x69, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x41, 0x0a, 0x0e, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e,
	0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0e, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x2f, 0x0a,
	0x13, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x3a,
	0x0a, 0x10, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x55, 0x72, 0x6c, 0x45, 0x6e,
	0x76, 0x56, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x22, 0xbc, 0x07, 0x0a, 0x09, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x77, 0x67, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x57, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x0f, 0x6c, 0x69,
	0x76, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x12, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x68, 0x6f, 0x6f, 0x6b, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a,
	0x16, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x77, 0x67, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x5f, 0x0a, 0x1a,
	0x70, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1a, 0x70, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a,
	0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x77, 0x67, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xa0, 0x01, 0x0a, 0x19, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x67, 0x65, 0x74, 0x22, 0x42, 0x0a, 0x1c,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f,
	0x22, 0x71, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77,
	0x67, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x1e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x67, 0x0a, 0x23, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x6f, 0x6e, 0x57,
	0x53, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b,
	0x6f, 0x6e, 0x57, 0x53, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x22, 0x9f, 0x03, 0x0a, 0x1b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x70, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12,
	0x44, 0x0a, 0x0b, 0x6d, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x68, 0x74, 0x74, 0x70, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x74, 0x74, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x17, 0x68, 0x74, 0x74, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x68, 0x74, 0x74, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x22, 0x84, 0x01,
	0x0a, 0x1c, 0x4d, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x48, 0x6f, 0x6f,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x21, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x21, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xb1, 0x01, 0x0a, 0x13,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x79,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6e, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x65, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x65, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x79, 0x22,
	0x54, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22,
	0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x05,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x22, 0x6a, 0x0a, 0x18, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x6f, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x70, 0x6f, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x43, 0x0a, 0x1d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6c, 0x65,
	0x57, 0x68, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x57, 0x68, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x22, 0xdf, 0x02, 0x0a, 0x13,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x59, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x67, 0x70, 0x62,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x47, 0x0a, 0x12, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf6, 0x04,
	0x0a, 0x17, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x74,
	0x12, 0x44, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x72, 0x61, 0x70, 0x68, 0x71,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77,
	0x67, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x16, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x54, 0x6f, 0x22, 0x8f, 0x02, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x12, 0x2e, 0x0a, 0x05,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x67,
	0x70, 0x62, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x47, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x52, 0x45, 0x53, 0x54, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x16, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x74, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x74, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xae, 0x03, 0x0a, 0x18, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x51, 0x4c, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x77, 0x67, 0x70, 0x62,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x0a, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x51, 0x4c, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x59, 0x0a,
	0x12, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x67, 0x70, 0x62,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xc5, 0x02, 0x0a, 0x19, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x61, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x73,
	0x6d, 0x61, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x30,
	0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x3d, 0x0a, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x6a, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6a, 0x73, 0x6f,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22,
	0x5a, 0x0a, 0x1e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x64, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x64, 0x6c, 0x22, 0x4a, 0x0a, 0x17, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x83, 0x01, 0x0a, 0x20, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x51, 0x4c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x53, 0x53, 0x45, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x53, 0x53, 0x45, 0x22, 0xed, 0x04,
	0x0a, 0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3c, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x77, 0x67, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67,
	0x70, 0x62, 0x2e, 0x55, 0x52, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x54, 0x0a, 0x16, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x72, 0x6c, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x72,
	0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x6d,
	0x54, 0x4c, 0x53, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x67, 0x70, 0x62,
	0x2e, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x6d, 0x54, 0x4c, 0x53, 0x12, 0x35, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65,
	0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x2f, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x1a, 0x4b, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x01,
	0x0a, 0x11, 0x4d, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x63,
	0x65, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53,
	0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x22, 0x98, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x77,
	0x67, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x6a, 0x77, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x4a,
	0x77, 0x74, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09,
	0x6a, 0x77, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x20, 0x6a, 0x77,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x4a, 0x77, 0x74, 0x55,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x20, 0x6a, 0x77,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x91,
	0x01, 0x0a, 0x1f, 0x4a, 0x77, 0x74, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x22, 0x81, 0x02, 0x0a, 0x30, 0x4a, 0x77, 0x74, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0d,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x5d, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77,
	0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x1b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x54, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x6b, 0x69, 0x70,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x73, 0x6b, 0x69, 0x70, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x41, 0x0a, 0x15, 0x55, 0x52, 0x4c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x41, 0x0a, 0x0a, 0x48, 0x54, 0x54, 0x50, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x11, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x54, 0x6f, 0x22, 0xd3, 0x02, 0x0a, 0x12, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x53, 0x0a, 0x16, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70,
	0x62, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x6e, 0x65, 0x73, 0x63,
	0x61, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x09, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xd6, 0x01, 0x0a, 0x15, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x53, 0x0a, 0x13, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x18, 0x57,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x4a, 0x0a,
	0x20, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f,
	0x75, 0x73, 0x6c, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51,
	0x4c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x21, 0x53, 0x33, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x6f, 0x6f, 0x6b,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x70, 0x72, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xca, 0x02, 0x0a,
	0x0f, 0x53, 0x33, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x3c, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3d, 0x0a, 0x05, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x67, 0x70, 0x62,
	0x2e, 0x53, 0x33, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0xb7, 0x04, 0x0a, 0x15, 0x53, 0x33,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12,
	0x45, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x53,
	0x53, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x53, 0x53, 0x4c,
	0x12, 0x57, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e,
	0x53, 0x33, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x58, 0x0a, 0x13, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x53, 0x33, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd8, 0x05, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x41, 0x70, 0x69, 0x12, 0x4b, 0x0a, 0x13, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x71, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x71,
	0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x77, 0x67, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x45, 0x0a, 0x11, 0x63, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x67,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x15, 0x73, 0x33,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62,
	0x2e, 0x53, 0x33, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x73, 0x33, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a,
	0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x6f, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x39,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x73,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x40, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xa5, 0x02, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x0d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x2d, 0x0a, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x29,
	0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x1c, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x42, 0x0a,
	0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x31,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0xa6, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x2d,
	0x0a, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x2b, 0x0a,
	0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x77, 0x67, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x22, 0x79, 0x0a, 0x14, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x31, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xd5, 0x01, 0x0a, 0x0f, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x94, 0x02,
	0x0a, 0x11, 0x43, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x67,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x77,
	0x67, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a,
	0x17, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0x4d, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x4e, 0x49, 0x43, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x41, 0x54, 0x41, 0x4c, 0x10, 0x05, 0x2a, 0x57, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x75,
	0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4f, 0x49, 0x44, 0x43, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x30, 0x10, 0x02, 0x2a,
	0x42, 0x0a, 0x0c, 0x41, 0x70, 0x69, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x43, 0x41, 0x43, 0x48,
	0x45, 0x10, 0x02, 0x2a, 0x41, 0x0a, 0x18, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x51,
	0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x4a, 0x53, 0x10, 0x01, 0x2a, 0x44, 0x0a, 0x1d, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x45, 0x54, 0x5f, 0x50,
	0x4f, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x2a, 0x47, 0x0a, 0x12,
	0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x66, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x49, 0x43, 0x4b, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x53, 0x45, 0x52, 0x49, 0x44, 0x10, 0x06, 0x2a, 0x3a, 0x0a,
	0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x55, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0x76, 0x0a, 0x0e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x52, 0x41, 0x50, 0x48, 0x51, 0x4c, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x51, 0x4c, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x51, 0x4c,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x4e, 0x47,
	0x4f, 0x44, 0x42, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x51, 0x4c, 0x49, 0x54, 0x45, 0x10,
	0x07, 0x2a, 0x71, 0x0a, 0x1a, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x1d, 0x0a, 0x19, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x57, 0x54, 0x10, 0x00, 0x12, 0x34,
	0x0a, 0x30, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x57, 0x54, 0x57, 0x69, 0x74, 0x68, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x10, 0x01, 0x2a, 0x27, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x53, 0x32, 0x35, 0x36, 0x10, 0x00, 0x2a, 0x41, 0x0a,
	0x0a, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x47,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04,
	0x2a, 0x36, 0x0a, 0x0e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x52,
	0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x82, 0x01, 0x0a, 0x1b, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x50,
	0x48, 0x51, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x52,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x53, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x43, 0x53, 0x56, 0x10, 0x02, 0x2a, 0x26, 0x0a,
	0x13, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41,
	0x32, 0x35, 0x36, 0x10, 0x00, 0x2a, 0x86, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x52, 0x49,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x56, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x52, 0x49,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48,
	0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x42, 0x2d,
	0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x77, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x77, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wundernode_config_proto_rawDescOnce sync.Once
	file_wundernode_config_proto_rawDescData = file_wundernode_config_proto_rawDesc
)

func file_wundernode_config_proto_rawDescGZIP() []byte {
	file_wundernode_config_proto_rawDescOnce.Do(func() {
		file_wundernode_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_wundernode_config_proto_rawDescData)
	})
	return file_wundernode_config_proto_rawDescData
}

var file_wundernode_config_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_wundernode_config_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_wundernode_config_proto_goTypes = []interface{}{
	(LogLevel)(0),                                            // 0: wgpb.LogLevel
	(AuthProviderKind)(0),                                    // 1: wgpb.AuthProviderKind
	(ApiCacheKind)(0),                                        // 2: wgpb.ApiCacheKind
	(OperationExecutionEngine)(0),                            // 3: wgpb.OperationExecutionEngine
	(PostResolveTransformationKind)(0),                       // 4: wgpb.PostResolveTransformationKind
	(InjectVariableKind)(0),                                  // 5: wgpb.InjectVariableKind
	(Claim)(0),                                               // 6: wgpb.Claim
	(OperationType)(0),                                       // 7: wgpb.OperationType
	(DataSourceKind)(0),                                      // 8: wgpb.DataSourceKind
	(UpstreamAuthenticationKind)(0),                          // 9: wgpb.UpstreamAuthenticationKind
	(SigningMethod)(0),                                       // 10: wgpb.SigningMethod
	(HTTPMethod)(0),                                          // 11: wgpb.HTTPMethod
	(ArgumentSource)(0),                                      // 12: wgpb.ArgumentSource
	(ArgumentRenderConfiguration)(0),                         // 13: wgpb.ArgumentRenderConfiguration
	(WebhookVerifierKind)(0),                                 // 14: wgpb.WebhookVerifierKind
	(ConfigurationVariableKind)(0),                           // 15: wgpb.ConfigurationVariableKind
	(*ApiAuthenticationConfig)(nil),                          // 16: wgpb.ApiAuthenticationConfig
	(*JwksBasedAuthentication)(nil),                          // 17: wgpb.JwksBasedAuthentication
	(*JwksAuthProvider)(nil),                                 // 18: wgpb.JwksAuthProvider
	(*ApiAuthenticationHooks)(nil),                           // 19: wgpb.ApiAuthenticationHooks
	(*CookieBasedAuthentication)(nil),                        // 20: wgpb.CookieBasedAuthentication
	(*AuthProvider)(nil),                                     // 21: wgpb.AuthProvider
	(*GithubAuthProviderConfig)(nil),                         // 22: wgpb.GithubAuthProviderConfig
	(*OpenIDConnectQueryParameter)(nil),                      // 23: wgpb.OpenIDConnectQueryParameter
	(*OpenIDConnectAuthProviderConfig)(nil),                  // 24: wgpb.OpenIDConnectAuthProviderConfig
	(*ApiCacheConfig)(nil),                                   // 25: wgpb.ApiCacheConfig
	(*InMemoryCacheConfig)(nil),                              // 26: wgpb.InMemoryCacheConfig
	(*RedisCacheConfig)(nil),                                 // 27: wgpb.RedisCacheConfig
	(*Operation)(nil),                                        // 28: wgpb.Operation
	(*PostResolveTransformation)(nil),                        // 29: wgpb.PostResolveTransformation
	(*PostResolveGetTransformation)(nil),                     // 30: wgpb.PostResolveGetTransformation
	(*OperationVariablesConfiguration)(nil),                  // 31: wgpb.OperationVariablesConfiguration
	(*VariableInjectionConfiguration)(nil),                   // 32: wgpb.VariableInjectionConfiguration
	(*GraphQLDataSourceHooksConfiguration)(nil),              // 33: wgpb.GraphQLDataSourceHooksConfiguration
	(*OperationHooksConfiguration)(nil),                      // 34: wgpb.OperationHooksConfiguration
	(*MockResolveHookConfiguration)(nil),                     // 35: wgpb.MockResolveHookConfiguration
	(*OperationAuthorizationConfig)(nil),                     // 36: wgpb.OperationAuthorizationConfig
	(*OperationRoleConfig)(nil),                              // 37: wgpb.OperationRoleConfig
	(*ClaimConfig)(nil),                                      // 38: wgpb.ClaimConfig
	(*OperationLiveQueryConfig)(nil),                         // 39: wgpb.OperationLiveQueryConfig
	(*OperationAuthenticationConfig)(nil),                    // 40: wgpb.OperationAuthenticationConfig
	(*OperationCacheConfig)(nil),                             // 41: wgpb.OperationCacheConfig
	(*EngineConfiguration)(nil),                              // 42: wgpb.EngineConfiguration
	(*DataSourceConfiguration)(nil),                          // 43: wgpb.DataSourceConfiguration
	(*DirectiveConfiguration)(nil),                           // 44: wgpb.DirectiveConfiguration
	(*DataSourceCustom_REST)(nil),                            // 45: wgpb.DataSourceCustom_REST
	(*StatusCodeTypeMapping)(nil),                            // 46: wgpb.StatusCodeTypeMapping
	(*DataSourceCustom_GraphQL)(nil),                         // 47: wgpb.DataSourceCustom_GraphQL
	(*DataSourceCustom_Database)(nil),                        // 48: wgpb.DataSourceCustom_Database
	(*GraphQLFederationConfiguration)(nil),                   // 49: wgpb.GraphQLFederationConfiguration
	(*DataSourceCustom_Static)(nil),                          // 50: wgpb.DataSourceCustom_Static
	(*GraphQLSubscriptionConfiguration)(nil),                 // 51: wgpb.GraphQLSubscriptionConfiguration
	(*FetchConfiguration)(nil),                               // 52: wgpb.FetchConfiguration
	(*MTLSConfiguration)(nil),                                // 53: wgpb.MTLSConfiguration
	(*UpstreamAuthentication)(nil),                           // 54: wgpb.UpstreamAuthentication
	(*JwtUpstreamAuthenticationConfig)(nil),                  // 55: wgpb.JwtUpstreamAuthenticationConfig
	(*JwtUpstreamAuthenticationWithAccessTokenExchange)(nil), // 56: wgpb.JwtUpstreamAuthenticationWithAccessTokenExchange
	(*RESTSubscriptionConfiguration)(nil),                    // 57: wgpb.RESTSubscriptionConfiguration
	(*URLQueryConfiguration)(nil),                            // 58: wgpb.URLQueryConfiguration
	(*HTTPHeader)(nil),                                       // 59: wgpb.HTTPHeader
	(*TypeConfiguration)(nil),                                // 60: wgpb.TypeConfiguration
	(*FieldConfiguration)(nil),                               // 61: wgpb.FieldConfiguration
	(*TypeField)(nil),                                        // 62: wgpb.TypeField
	(*SingleTypeField)(nil),                                  // 63: wgpb.SingleTypeField
	(*ArgumentConfiguration)(nil),                            // 64: wgpb.ArgumentConfiguration
	(*WunderGraphConfiguration)(nil),                         // 65: wgpb.WunderGraphConfiguration
	(*S3UploadProfileHooksConfiguration)(nil),                // 66: wgpb.S3UploadProfileHooksConfiguration
	(*S3UploadProfile)(nil),                                  // 67: wgpb.S3UploadProfile
	(*S3UploadConfiguration)(nil),                            // 68: wgpb.S3UploadConfiguration
	(*UserDefinedApi)(nil),                                   // 69: wgpb.UserDefinedApi
	(*ListenerOptions)(nil),                                  // 70: wgpb.ListenerOptions
	(*NodeLogging)(nil),                                      // 71: wgpb.NodeLogging
	(*NodeOptions)(nil),                                      // 72: wgpb.NodeOptions
	(*ServerLogging)(nil),                                    // 73: wgpb.ServerLogging
	(*ServerOptions)(nil),                                    // 74: wgpb.ServerOptions
	(*WebhookConfiguration)(nil),                             // 75: wgpb.WebhookConfiguration
	(*WebhookVerifier)(nil),                                  // 76: wgpb.WebhookVerifier
	(*CorsConfiguration)(nil),                                // 77: wgpb.CorsConfiguration
	(*ConfigurationVariable)(nil),                            // 78: wgpb.ConfigurationVariable
	nil,                                                      // 79: wgpb.FetchConfiguration.HeaderEntry
	nil,                                                      // 80: wgpb.S3UploadConfiguration.UploadProfilesEntry
}
var file_wundernode_config_proto_depIdxs = []int32{
	20,  // 0: wgpb.ApiAuthenticationConfig.cookieBased:type_name -> wgpb.CookieBasedAuthentication
	19,  // 1: wgpb.ApiAuthenticationConfig.hooks:type_name -> wgpb.ApiAuthenticationHooks
	17,  // 2: wgpb.ApiAuthenticationConfig.jwksBased:type_name -> wgpb.JwksBasedAuthentication
	18,  // 3: wgpb.JwksBasedAuthentication.providers:type_name -> wgpb.JwksAuthProvider
	78,  // 4: wgpb.JwksAuthProvider.jwksUrl:type_name -> wgpb.ConfigurationVariable
	78,  // 5: wgpb.JwksAuthProvider.jwksJson:type_name -> wgpb.ConfigurationVariable
	78,  // 6: wgpb.JwksAuthProvider.userInfoEndpoint:type_name -> wgpb.ConfigurationVariable
	21,  // 7: wgpb.CookieBasedAuthentication.providers:type_name -> wgpb.AuthProvider
	78,  // 8: wgpb.CookieBasedAuthentication.authorizedRedirectUris:type_name -> wgpb.ConfigurationVariable
	78,  // 9: wgpb.CookieBasedAuthentication.authorizedRedirectUriRegexes:type_name -> wgpb.ConfigurationVariable
	78,  // 10: wgpb.CookieBasedAuthentication.hashKey:type_name -> wgpb.ConfigurationVariable
	78,  // 11: wgpb.CookieBasedAuthentication.blockKey:type_name -> wgpb.ConfigurationVariable
	78,  // 12: wgpb.CookieBasedAuthentication.csrfSecret:type_name -> wgpb.ConfigurationVariable
	1,   // 13: wgpb.AuthProvider.kind:type_name -> wgpb.AuthProviderKind
	22,  // 14: wgpb.AuthProvider.githubConfig:type_name -> wgpb.GithubAuthProviderConfig
	24,  // 15: wgpb.AuthProvider.oidcConfig:type_name -> wgpb.OpenIDConnectAuthProviderConfig
	78,  // 16: wgpb.GithubAuthProviderConfig.clientId:type_name -> wgpb.ConfigurationVariable
	78,  // 17: wgpb.GithubAuthProviderConfig.clientSecret:type_name -> wgpb.ConfigurationVariable
	78,  // 18: wgpb.OpenIDConnectQueryParameter.name:type_name -> wgpb.ConfigurationVariable
	78,  // 19: wgpb.OpenIDConnectQueryParameter.value:type_name -> wgpb.ConfigurationVariable
	78,  // 20: wgpb.OpenIDConnectAuthProviderConfig.issuer:type_name -> wgpb.ConfigurationVariable
	78,  // 21: wgpb.OpenIDConnectAuthProviderConfig.clientId:type_name -> wgpb.ConfigurationVariable
	78,  // 22: wgpb.OpenIDConnectAuthProviderConfig.clientSecret:type_name -> wgpb.ConfigurationVariable
	23,  // 23: wgpb.OpenIDConnectAuthProviderConfig.queryParameters:type_name -> wgpb.OpenIDConnectQueryParameter
	2,   // 24: wgpb.ApiCacheConfig.kind:type_name -> wgpb.ApiCacheKind
	26,  // 25: wgpb.ApiCacheConfig.inMemoryConfig:type_name -> wgpb.InMemoryCacheConfig
	27,  // 26: wgpb.ApiCacheConfig.redisConfig:type_name -> wgpb.RedisCacheConfig
	7,   // 27: wgpb.Operation.operationType:type_name -> wgpb.OperationType
	41,  // 28: wgpb.Operation.cacheConfig:type_name -> wgpb.OperationCacheConfig
	40,  // 29: wgpb.Operation.authenticationConfig:type_name -> wgpb.OperationAuthenticationConfig
	39,  // 30: wgpb.Operation.liveQueryConfig:type_name -> wgpb.OperationLiveQueryConfig
	36,  // 31: wgpb.Operation.authorizationConfig:type_name -> wgpb.OperationAuthorizationConfig
	34,  // 32: wgpb.Operation.hooksConfiguration:type_name -> wgpb.OperationHooksConfiguration
	31,  // 33: wgpb.Operation.variablesConfiguration:type_name -> wgpb.OperationVariablesConfiguration
	29,  // 34: wgpb.Operation.postResolveTransformations:type_name -> wgpb.PostResolveTransformation
	3,   // 35: wgpb.Operation.engine:type_name -> wgpb.OperationExecutionEngine
	4,   // 36: wgpb.PostResolveTransformation.kind:type_name -> wgpb.PostResolveTransformationKind
	30,  // 37: wgpb.PostResolveTransformation.get:type_name -> wgpb.PostResolveGetTransformation
	32,  // 38: wgpb.OperationVariablesConfiguration.injectVariables:type_name -> wgpb.VariableInjectionConfiguration
	5,   // 39: wgpb.VariableInjectionConfiguration.variableKind:type_name -> wgpb.InjectVariableKind
	35,  // 40: wgpb.OperationHooksConfiguration.mockResolve:type_name -> wgpb.MockResolveHookConfiguration
	38,  // 41: wgpb.OperationAuthorizationConfig.claims:type_name -> wgpb.ClaimConfig
	37,  // 42: wgpb.OperationAuthorizationConfig.roleConfig:type_name -> wgpb.OperationRoleConfig
	6,   // 43: wgpb.ClaimConfig.claim:type_name -> wgpb.Claim
	43,  // 44: wgpb.EngineConfiguration.datasourceConfigurations:type_name -> wgpb.DataSourceConfiguration
	61,  // 45: wgpb.EngineConfiguration.fieldConfigurations:type_name -> wgpb.FieldConfiguration
	60,  // 46: wgpb.EngineConfiguration.typeConfigurations:type_name -> wgpb.TypeConfiguration
	8,   // 47: wgpb.DataSourceConfiguration.kind:type_name -> wgpb.DataSourceKind
	62,  // 48: wgpb.DataSourceConfiguration.rootNodes:type_name -> wgpb.TypeField
	62,  // 49: wgpb.DataSourceConfiguration.childNodes:type_name -> wgpb.TypeField
	45,  // 50: wgpb.DataSourceConfiguration.customRest:type_name -> wgpb.DataSourceCustom_REST
	47,  // 51: wgpb.DataSourceConfiguration.customGraphql:type_name -> wgpb.DataSourceCustom_GraphQL
	50,  // 52: wgpb.DataSourceConfiguration.customStatic:type_name -> wgpb.DataSourceCustom_Static
	48,  // 53: wgpb.DataSourceConfiguration.customDatabase:type_name -> wgpb.DataSourceCustom_Database
	44,  // 54: wgpb.DataSourceConfiguration.directives:type_name -> wgpb.DirectiveConfiguration
	52,  // 55: wgpb.DataSourceCustom_REST.fetch:type_name -> wgpb.FetchConfiguration
	57,  // 56: wgpb.DataSourceCustom_REST.subscription:type_name -> wgpb.RESTSubscriptionConfiguration
	46,  // 57: wgpb.DataSourceCustom_REST.statusCodeTypeMappings:type_name -> wgpb.StatusCodeTypeMapping
	52,  // 58: wgpb.DataSourceCustom_GraphQL.fetch:type_name -> wgpb.FetchConfiguration
	51,  // 59: wgpb.DataSourceCustom_GraphQL.subscription:type_name -> wgpb.GraphQLSubscriptionConfiguration
	49,  // 60: wgpb.DataSourceCustom_GraphQL.federation:type_name -> wgpb.GraphQLFederationConfiguration
	33,  // 61: wgpb.DataSourceCustom_GraphQL.hooksConfiguration:type_name -> wgpb.GraphQLDataSourceHooksConfiguration
	63,  // 62: wgpb.DataSourceCustom_GraphQL.customScalarTypeFields:type_name -> wgpb.SingleTypeField
	78,  // 63: wgpb.DataSourceCustom_Database.databaseURL:type_name -> wgpb.ConfigurationVariable
	63,  // 64: wgpb.DataSourceCustom_Database.jsonTypeFields:type_name -> wgpb.SingleTypeField
	78,  // 65: wgpb.DataSourceCustom_Static.data:type_name -> wgpb.ConfigurationVariable
	78,  // 66: wgpb.GraphQLSubscriptionConfiguration.url:type_name -> wgpb.ConfigurationVariable
	78,  // 67: wgpb.FetchConfiguration.url:type_name -> wgpb.ConfigurationVariable
	11,  // 68: wgpb.FetchConfiguration.method:type_name -> wgpb.HTTPMethod
	79,  // 69: wgpb.FetchConfiguration.header:type_name -> wgpb.FetchConfiguration.HeaderEntry
	78,  // 70: wgpb.FetchConfiguration.body:type_name -> wgpb.ConfigurationVariable
	58,  // 71: wgpb.FetchConfiguration.query:type_name -> wgpb.URLQueryConfiguration
	54,  // 72: wgpb.FetchConfiguration.upstreamAuthentication:type_name -> wgpb.UpstreamAuthentication
	53,  // 73: wgpb.FetchConfiguration.mTLS:type_name -> wgpb.MTLSConfiguration
	78,  // 74: wgpb.FetchConfiguration.baseUrl:type_name -> wgpb.ConfigurationVariable
	78,  // 75: wgpb.FetchConfiguration.path:type_name -> wgpb.ConfigurationVariable
	78,  // 76: wgpb.MTLSConfiguration.key:type_name -> wgpb.ConfigurationVariable
	78,  // 77: wgpb.MTLSConfiguration.cert:type_name -> wgpb.ConfigurationVariable
	9,   // 78: wgpb.UpstreamAuthentication.kind:type_name -> wgpb.UpstreamAuthenticationKind
	55,  // 79: wgpb.UpstreamAuthentication.jwtConfig:type_name -> wgpb.JwtUpstreamAuthenticationConfig
	56,  // 80: wgpb.UpstreamAuthentication.jwtWithAccessTokenExchangeConfig:type_name -> wgpb.JwtUpstreamAuthenticationWithAccessTokenExchange
	78,  // 81: wgpb.JwtUpstreamAuthenticationConfig.secret:type_name -> wgpb.ConfigurationVariable
	10,  // 82: wgpb.JwtUpstreamAuthenticationConfig.signingMethod:type_name -> wgpb.SigningMethod
	78,  // 83: wgpb.JwtUpstreamAuthenticationWithAccessTokenExchange.secret:type_name -> wgpb.ConfigurationVariable
	10,  // 84: wgpb.JwtUpstreamAuthenticationWithAccessTokenExchange.signingMethod:type_name -> wgpb.SigningMethod
	78,  // 85: wgpb.JwtUpstreamAuthenticationWithAccessTokenExchange.accessTokenExchangeEndpoint:type_name -> wgpb.ConfigurationVariable
	78,  // 86: wgpb.HTTPHeader.values:type_name -> wgpb.ConfigurationVariable
	64,  // 87: wgpb.FieldConfiguration.argumentsConfiguration:type_name -> wgpb.ArgumentConfiguration
	12,  // 88: wgpb.ArgumentConfiguration.sourceType:type_name -> wgpb.ArgumentSource
	13,  // 89: wgpb.ArgumentConfiguration.renderConfiguration:type_name -> wgpb.ArgumentRenderConfiguration
	69,  // 90: wgpb.WunderGraphConfiguration.api:type_name -> wgpb.UserDefinedApi
	66,  // 91: wgpb.S3UploadProfile.hooks:type_name -> wgpb.S3UploadProfileHooksConfiguration
	78,  // 92: wgpb.S3UploadConfiguration.endpoint:type_name -> wgpb.ConfigurationVariable
	78,  // 93: wgpb.S3UploadConfiguration.accessKeyID:type_name -> wgpb.ConfigurationVariable
	78,  // 94: wgpb.S3UploadConfiguration.secretAccessKey:type_name -> wgpb.ConfigurationVariable
	78,  // 95: wgpb.S3UploadConfiguration.bucketName:type_name -> wgpb.ConfigurationVariable
	78,  // 96: wgpb.S3UploadConfiguration.bucketLocation:type_name -> wgpb.ConfigurationVariable
	80,  // 97: wgpb.S3UploadConfiguration.uploadProfiles:type_name -> wgpb.S3UploadConfiguration.UploadProfilesEntry
	42,  // 98: wgpb.UserDefinedApi.engineConfiguration:type_name -> wgpb.EngineConfiguration
	28,  // 99: wgpb.UserDefinedApi.operations:type_name -> wgpb.Operation
	77,  // 100: wgpb.UserDefinedApi.corsConfiguration:type_name -> wgpb.CorsConfiguration
	16,  // 101: wgpb.UserDefinedApi.authenticationConfig:type_name -> wgpb.ApiAuthenticationConfig
	68,  // 102: wgpb.UserDefinedApi.s3UploadConfiguration:type_name -> wgpb.S3UploadConfiguration
	78,  // 103: wgpb.UserDefinedApi.allowedHostNames:type_name -> wgpb.ConfigurationVariable
	75,  // 104: wgpb.UserDefinedApi.webhooks:type_name -> wgpb.WebhookConfiguration
	74,  // 105: wgpb.UserDefinedApi.serverOptions:type_name -> wgpb.ServerOptions
	72,  // 106: wgpb.UserDefinedApi.nodeOptions:type_name -> wgpb.NodeOptions
	78,  // 107: wgpb.ListenerOptions.host:type_name -> wgpb.ConfigurationVariable
	78,  // 108: wgpb.ListenerOptions.port:type_name -> wgpb.ConfigurationVariable
	78,  // 109: wgpb.NodeLogging.level:type_name -> wgpb.ConfigurationVariable
	78,  // 110: wgpb.NodeOptions.nodeUrl:type_name -> wgpb.ConfigurationVariable
	78,  // 111: wgpb.NodeOptions.publicNodeUrl:type_name -> wgpb.ConfigurationVariable
	70,  // 112: wgpb.NodeOptions.listen:type_name -> wgpb.ListenerOptions
	71,  // 113: wgpb.NodeOptions.logger:type_name -> wgpb.NodeLogging
	78,  // 114: wgpb.ServerLogging.level:type_name -> wgpb.ConfigurationVariable
	78,  // 115: wgpb.ServerOptions.serverUrl:type_name -> wgpb.ConfigurationVariable
	70,  // 116: wgpb.ServerOptions.listen:type_name -> wgpb.ListenerOptions
	73,  // 117: wgpb.ServerOptions.logger:type_name -> wgpb.ServerLogging
	76,  // 118: wgpb.WebhookConfiguration.verifier:type_name -> wgpb.WebhookVerifier
	14,  // 119: wgpb.WebhookVerifier.kind:type_name -> wgpb.WebhookVerifierKind
	78,  // 120: wgpb.WebhookVerifier.secret:type_name -> wgpb.ConfigurationVariable
	78,  // 121: wgpb.CorsConfiguration.allowedOrigins:type_name -> wgpb.ConfigurationVariable
	15,  // 122: wgpb.ConfigurationVariable.kind:type_name -> wgpb.ConfigurationVariableKind
	59,  // 123: wgpb.FetchConfiguration.HeaderEntry.value:type_name -> wgpb.HTTPHeader
	67,  // 124: wgpb.S3UploadConfiguration.UploadProfilesEntry.value:type_name -> wgpb.S3UploadProfile
	125, // [125:125] is the sub-list for method output_type
	125, // [125:125] is the sub-list for method input_type
	125, // [125:125] is the sub-list for extension type_name
	125, // [125:125] is the sub-list for extension extendee
	0,   // [0:125] is the sub-list for field type_name
}

func init() { file_wundernode_config_proto_init() }
func file_wundernode_config_proto_init() {
	if File_wundernode_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wundernode_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiAuthenticationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwksBasedAuthentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwksAuthProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiAuthenticationHooks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookieBasedAuthentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubAuthProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenIDConnectQueryParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenIDConnectAuthProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiCacheConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InMemoryCacheConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisCacheConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostResolveTransformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostResolveGetTransformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationVariablesConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableInjectionConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLDataSourceHooksConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationHooksConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockResolveHookConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationAuthorizationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationRoleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationLiveQueryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationAuthenticationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationCacheConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectiveConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceCustom_REST); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusCodeTypeMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceCustom_GraphQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceCustom_Database); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLFederationConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceCustom_Static); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQLSubscriptionConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTLSConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamAuthentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtUpstreamAuthenticationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtUpstreamAuthenticationWithAccessTokenExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RESTSubscriptionConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URLQueryConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleTypeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgumentConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WunderGraphConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3UploadProfileHooksConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3UploadProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3UploadConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDefinedApi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeLogging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerLogging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookVerifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorsConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wundernode_config_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wundernode_config_proto_rawDesc,
			NumEnums:      16,
			NumMessages:   65,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wundernode_config_proto_goTypes,
		DependencyIndexes: file_wundernode_config_proto_depIdxs,
		EnumInfos:         file_wundernode_config_proto_enumTypes,
		MessageInfos:      file_wundernode_config_proto_msgTypes,
	}.Build()
	File_wundernode_config_proto = out.File
	file_wundernode_config_proto_rawDesc = nil
	file_wundernode_config_proto_goTypes = nil
	file_wundernode_config_proto_depIdxs = nil
}
