// Code generated by wunderctl. DO NOT EDIT.
package client

import (
	"context"
	"net/http"

	"github.com/wundergraph/client-go/pkg/execute"
)

type Client struct {
	httpClient *http.Client
	baseURL    string
}

func New(httpClient *http.Client, baseURL string) *Client {
	return &Client{httpClient, baseURL}
}

func (c *Client) Queries() *Queries {
	return &Queries{c}
}

func (c *Client) Mutations() *Mutations {
	return &Mutations{c}
}

func (c *Client) Subscriptions() *Subscriptions {
	return &Subscriptions{c}
}

func (c *Client) LiveQueries() *LiveQueries {
	return &LiveQueries{c}
}

type Queries struct {
	client *Client
}

func (q *Queries) JSP(ctx context.Context) (*JSPResponse, error) {
	return execute.Query[any, JSPResponse](q.client.httpClient, ctx, q.client.baseURL, "/JSP", nil)
}
func (q *Queries) Join(ctx context.Context) (*JoinResponse, error) {
	return execute.Query[any, JoinResponse](q.client.httpClient, ctx, q.client.baseURL, "/Join", nil)
}
func (q *Queries) Post(ctx context.Context, input PostInput) (*PostResponse, error) {
	return execute.Query[PostInput, PostResponse](q.client.httpClient, ctx, q.client.baseURL, "/Post", &input)
}
func (q *Queries) Posts(ctx context.Context) (*PostsResponse, error) {
	return execute.Query[any, PostsResponse](q.client.httpClient, ctx, q.client.baseURL, "/Posts", nil)
}
func (q *Queries) Union(ctx context.Context, input UnionInput) (*UnionResponse, error) {
	return execute.Query[UnionInput, UnionResponse](q.client.httpClient, ctx, q.client.baseURL, "/Union", &input)
}
func (q *Queries) Weather(ctx context.Context, input WeatherInput) (*WeatherResponse, error) {
	return execute.Query[WeatherInput, WeatherResponse](q.client.httpClient, ctx, q.client.baseURL, "/Weather", &input)
}

type LiveQueries struct {
	client *Client
}

func (l *LiveQueries) JSP(ctx context.Context) (*execute.Stream[JSPResponse], error) {
	return execute.LiveQuery[any, JSPResponse](l.client.httpClient, ctx, l.client.baseURL, "/JSP", nil)
}
func (l *LiveQueries) Join(ctx context.Context) (*execute.Stream[JoinResponse], error) {
	return execute.LiveQuery[any, JoinResponse](l.client.httpClient, ctx, l.client.baseURL, "/Join", nil)
}
func (l *LiveQueries) Post(ctx context.Context, input PostInput) (*execute.Stream[PostResponse], error) {
	return execute.LiveQuery[PostInput, PostResponse](l.client.httpClient, ctx, l.client.baseURL, "/Post", &input)
}
func (l *LiveQueries) Posts(ctx context.Context) (*execute.Stream[PostsResponse], error) {
	return execute.LiveQuery[any, PostsResponse](l.client.httpClient, ctx, l.client.baseURL, "/Posts", nil)
}
func (l *LiveQueries) Union(ctx context.Context, input UnionInput) (*execute.Stream[UnionResponse], error) {
	return execute.LiveQuery[UnionInput, UnionResponse](l.client.httpClient, ctx, l.client.baseURL, "/Union", &input)
}
func (l *LiveQueries) Weather(ctx context.Context, input WeatherInput) (*execute.Stream[WeatherResponse], error) {
	return execute.LiveQuery[WeatherInput, WeatherResponse](l.client.httpClient, ctx, l.client.baseURL, "/Weather", &input)
}

type Mutations struct {
	client *Client
}

func (m *Mutations) SDL(ctx context.Context, input SDLInput) (*SDLResponse, error) {
	return execute.Mutate[SDLInput, SDLResponse](m.client.httpClient, ctx, m.client.baseURL, "/SDL", &input)
}
func (m *Mutations) SetField(ctx context.Context, input SetFieldInput) (*SetFieldResponse, error) {
	return execute.Mutate[SetFieldInput, SetFieldResponse](m.client.httpClient, ctx, m.client.baseURL, "/SetField", &input)
}

type Subscriptions struct {
	client *Client
}
